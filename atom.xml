<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>能遇见你甚是开心</title>
  
  
  <link href="http://www.pangtouyu77.fun/atom.xml" rel="self"/>
  
  <link href="http://www.pangtouyu77.fun/"/>
  <updated>2022-10-19T07:02:50.648Z</updated>
  <id>http://www.pangtouyu77.fun/</id>
  
  <author>
    <name>Senbo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二进制运算技巧</title>
    <link href="http://www.pangtouyu77.fun/2022/10/19/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BF%90%E7%AE%97%E6%8A%80%E5%B7%A7/"/>
    <id>http://www.pangtouyu77.fun/2022/10/19/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BF%90%E7%AE%97%E6%8A%80%E5%B7%A7/</id>
    <published>2022-10-19T00:33:18.000Z</published>
    <updated>2022-10-19T07:02:50.648Z</updated>
    
    <content type="html"><![CDATA[<h4 id="最低位的移除与获取"><a href="#最低位的移除与获取" class="headerlink" title="最低位的移除与获取"></a>最低位的移除与获取</h4><ul><li><p>移除：n &amp; (n - 1)</p></li><li><p>获取：n &amp; (-n)</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;最低位的移除与获取&quot;&gt;&lt;a href=&quot;#最低位的移除与获取&quot; class=&quot;headerlink&quot; title=&quot;最低位的移除与获取&quot;&gt;&lt;/a&gt;最低位的移除与获取&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;移除：n &amp;amp; (n - 1)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    
    <category term="二进制" scheme="http://www.pangtouyu77.fun/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>将虚拟机ip端口号映射到主机</title>
    <link href="http://www.pangtouyu77.fun/2022/10/13/%E5%B0%86%E8%99%9A%E6%8B%9F%E6%9C%BAip%E7%AB%AF%E5%8F%A3%E5%8F%B7%E6%98%A0%E5%B0%84%E5%88%B0%E4%B8%BB%E6%9C%BA/"/>
    <id>http://www.pangtouyu77.fun/2022/10/13/%E5%B0%86%E8%99%9A%E6%8B%9F%E6%9C%BAip%E7%AB%AF%E5%8F%A3%E5%8F%B7%E6%98%A0%E5%B0%84%E5%88%B0%E4%B8%BB%E6%9C%BA/</id>
    <published>2022-10-13T03:35:07.000Z</published>
    <updated>2022-10-19T07:52:04.716Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-查看虚拟机ip"><a href="#1-查看虚拟机ip" class="headerlink" title="1.查看虚拟机ip"></a>1.查看虚拟机ip</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p><img src="/2022/10/13/%E5%B0%86%E8%99%9A%E6%8B%9F%E6%9C%BAip%E7%AB%AF%E5%8F%A3%E5%8F%B7%E6%98%A0%E5%B0%84%E5%88%B0%E4%B8%BB%E6%9C%BA/%E5%B0%86%E8%99%9A%E6%8B%9F%E6%9C%BAip%E7%AB%AF%E5%8F%A3%E5%8F%B7%E6%98%A0%E5%B0%84%E5%88%B0%E4%B8%BB%E6%9C%BA%5C1.png" alt="image-20221013113750968"></p><h3 id="2-虚拟网络设置"><a href="#2-虚拟网络设置" class="headerlink" title="2.虚拟网络设置"></a>2.虚拟网络设置</h3><h4 id="2-1虚拟机-gt-编辑-gt-虚拟网络编辑器-gt-更改设置"><a href="#2-1虚拟机-gt-编辑-gt-虚拟网络编辑器-gt-更改设置" class="headerlink" title="2.1虚拟机 -&gt; 编辑 -&gt; 虚拟网络编辑器 -&gt;更改设置"></a>2.1<a class="link" href="https://so.csdn.net/so/search?q=%E8%99%9A%E6%8B%9F%E6%9C%BA&spm=1001.2101.3001.7020">虚拟机<i class="fas fa-external-link-alt"></i></a> -&gt; 编辑 -&gt; 虚拟网络编辑器 -&gt;更改设置</h4><h4 id="2-2NAT设置"><a href="#2-2NAT设置" class="headerlink" title="2.2NAT设置"></a>2.2NAT设置</h4><p><img src="/2022/10/13/%E5%B0%86%E8%99%9A%E6%8B%9F%E6%9C%BAip%E7%AB%AF%E5%8F%A3%E5%8F%B7%E6%98%A0%E5%B0%84%E5%88%B0%E4%B8%BB%E6%9C%BA/%E5%B0%86%E8%99%9A%E6%8B%9F%E6%9C%BAip%E7%AB%AF%E5%8F%A3%E5%8F%B7%E6%98%A0%E5%B0%84%E5%88%B0%E4%B8%BB%E6%9C%BA%5C2.png" alt="在这里插入图片描述"></p><h4 id="2-3添加"><a href="#2-3添加" class="headerlink" title="2.3添加"></a>2.3添加</h4><p>将刚才查到的ip和想映射的端口添加。</p><p><img src="/2022/10/13/%E5%B0%86%E8%99%9A%E6%8B%9F%E6%9C%BAip%E7%AB%AF%E5%8F%A3%E5%8F%B7%E6%98%A0%E5%B0%84%E5%88%B0%E4%B8%BB%E6%9C%BA/%E5%B0%86%E8%99%9A%E6%8B%9F%E6%9C%BAip%E7%AB%AF%E5%8F%A3%E5%8F%B7%E6%98%A0%E5%B0%84%E5%88%B0%E4%B8%BB%E6%9C%BA%5C3.png" alt="在这里插入图片描述"></p><p>注意：提前开放防火墙对应端口，或者直接关闭防火墙</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-查看虚拟机ip&quot;&gt;&lt;a href=&quot;#1-查看虚拟机ip&quot; class=&quot;headerlink&quot; title=&quot;1.查看虚拟机ip&quot;&gt;&lt;/a&gt;1.查看虚拟机ip&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;t</summary>
      
    
    
    
    
    <category term="ip" scheme="http://www.pangtouyu77.fun/tags/ip/"/>
    
    <category term="虚拟机" scheme="http://www.pangtouyu77.fun/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>redis6配置以及新数据类型</title>
    <link href="http://www.pangtouyu77.fun/2022/09/25/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://www.pangtouyu77.fun/2022/09/25/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2022-09-25T06:56:00.000Z</published>
    <updated>2022-10-19T08:36:06.970Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-redis配置"><a href="#1-redis配置" class="headerlink" title="1.redis配置"></a>1.redis配置</h1><h2 id="1-1-Units单位"><a href="#1-1-Units单位" class="headerlink" title="1.1 Units单位"></a>1.1 Units单位</h2><p>配置大小单位,开头定义了一些基本的度量单位，只支持bytes，不支持bit。大小写不敏感</p><p><img src="/2022/09/25/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cimage-20220925150254075.png" alt="image-20220925150254075"></p><h2 id="1-2-INCLUDES包含"><a href="#1-2-INCLUDES包含" class="headerlink" title="1.2  ###INCLUDES包含###"></a>1.2  ###INCLUDES包含###</h2><p>类似jsp中的include，多实例的情况可以把公用的配置文件提取出来。</p><p><img src="/2022/09/25/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cimage-20220925150428914.png" alt="image-20220925150428914"></p><h2 id="1-3-网络相关配置"><a href="#1-3-网络相关配置" class="headerlink" title="1.3 网络相关配置"></a>1.3 网络相关配置</h2><h3 id="1-bind"><a href="#1-bind" class="headerlink" title="1. bind"></a>1. bind</h3><ul><li><p>默认情况bind=127.0.0.1只能接受本机的访问请求</p></li><li><p>不写的情况下，无限制接受任何ip地址的访问</p></li><li><p>生产环境肯定要写你应用服务器的地址；服务器是需要远程访问的，所以需要将其注释掉</p></li><li><p>如果开启了<strong>protected-mode</strong>，那么在没有设定bind ip且没有设密码的情况下，Redis只允许接受本机的响应</p></li></ul><h3 id="2-protected-mode"><a href="#2-protected-mode" class="headerlink" title="2. protected-mode"></a>2. protected-mode</h3><p>将本机访问保护模式设置no</p><h3 id="3-port"><a href="#3-port" class="headerlink" title="3.port"></a>3.port</h3><p>端口号，默认6379</p><h3 id="4-tcp-backlog"><a href="#4-tcp-backlog" class="headerlink" title="4.tcp-backlog"></a>4.tcp-backlog</h3><ul><li><p>设置tcp的backlog，backlog其实是一个连接队列，backlog队列总和=未完成三次握手队列 + 已经完成三次握手队列。</p></li><li><p>在高并发环境下你需要一个高backlog值来避免慢客户端连接问题。</p></li><li><p>注意Linux内核会将这个值减小到/proc/sys/net/core/somaxconn的值（128），所以需要确认增大/proc/sys/net/core/somaxconn和/proc/sys/net/ipv4/tcp_max_syn_backlog（128）两个值来达到想要的效果</p></li></ul><p><img src="/2022/09/25/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cimage-20220925151115682.png" alt="image-20220925151115682"></p><h3 id="5-timeout"><a href="#5-timeout" class="headerlink" title="5.timeout"></a>5.timeout</h3><p>一个空闲的客户端维持多少秒会关闭，0表示关闭该功能。即永不关闭。</p><h3 id="6-tcp-keepalive"><a href="#6-tcp-keepalive" class="headerlink" title="6. tcp-keepalive"></a>6. tcp-keepalive</h3><ul><li><p>对访问客户端的一种心跳检测，每个n秒检测一次。</p></li><li><p>单位为秒，如果设置为0，则不会进行Keepalive检测，建议设置成60 </p></li></ul><h2 id="1-4-GENERAL通用"><a href="#1-4-GENERAL通用" class="headerlink" title="1.4 GENERAL通用"></a>1.4 GENERAL通用</h2><h3 id="1-daemonize"><a href="#1-daemonize" class="headerlink" title="1. daemonize"></a>1. daemonize</h3><ul><li><p>是否为后台进程，设置为yes</p></li><li><p>守护进程，后台启动</p></li></ul><h3 id="2-pidfile"><a href="#2-pidfile" class="headerlink" title="2. pidfile"></a>2. pidfile</h3><ul><li>存放pid文件的位置，每个实例会产生一个不同的pid文件</li></ul><p><img src="/2022/09/25/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cimage-20220925151502292.png" alt="image-20220925151502292"></p><h3 id="3-loglevel"><a href="#3-loglevel" class="headerlink" title="3.loglevel"></a>3.loglevel</h3><ul><li><p>指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为<strong>notice</strong></p></li><li><p>四个级别根据使用阶段来选择，生产环境选择notice 或者warning</p></li></ul><h3 id="4-logfile"><a href="#4-logfile" class="headerlink" title="4.logfile"></a>4.logfile</h3><p>日志文件名称</p><h3 id="5-database-16"><a href="#5-database-16" class="headerlink" title="5.database 16"></a>5.database 16</h3><p>设定库的数量 默认16，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id</dbid></p><h2 id="1-5-SECURITY-安全"><a href="#1-5-SECURITY-安全" class="headerlink" title="1.5 SECURITY 安全"></a>1.5 SECURITY 安全</h2><ul><li>临时密码：在命令中设置密码，只是临时的。重启redis服务器，密码就还原了。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">config get requirepass</span><br><span class="line"></span><br><span class="line">config set requirepass &quot;123456&quot;</span><br><span class="line"></span><br><span class="line">auth 123456</span><br><span class="line"># true</span><br></pre></td></tr></table></figure><ul><li><p>永久密码：需要再配置文件中进行设置。</p><p><img src="/2022/09/25/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cimage-20220925152252087.png" alt="image-20220925152252087"></p></li></ul><h2 id="1-6-LIMITS限制"><a href="#1-6-LIMITS限制" class="headerlink" title="1.6 LIMITS限制"></a>1.6 LIMITS限制</h2><h3 id="1-maxclients"><a href="#1-maxclients" class="headerlink" title="1. maxclients"></a>1. maxclients</h3><ul><li>设置redis同时可以与多少个客户端进行连接。</li><li> 默认情况下为10000个客户端。</li><li>如果达到了此限制，redis则会拒绝新的连接请求，并且向这些连接请求方发出“max number of clients reached”以作回应。</li></ul><h3 id="2-maxmemory"><a href="#2-maxmemory" class="headerlink" title="2.maxmemory"></a>2.maxmemory</h3><ul><li>建议****必须设置****，否则，将内存占满，造成服务器宕机</li><li>设置redis可以使用的内存量。一旦到达内存使用上限，redis将会试图移除内部数据，移除规则可以通过maxmemory-policy来指定。</li><li> 如果redis无法根据移除规则来移除内存中的数据，或者设置了“不允许移除”，那么redis则会针对那些需要申请内存的指令返回错误信息，比如SET、LPUSH等。</li><li>但是对于无内存申请的指令，仍然会正常响应，比如GET等。如果你的redis是主redis（说明你的redis有从redis），那么在设置内存使用上限时，需要在系统中留出一些内存空间给同步队列缓存，只有在你设置的是“不移除”的情况下，才不用考虑这个因素。</li></ul><h3 id="3-maxmemory-policy"><a href="#3-maxmemory-policy" class="headerlink" title="3.maxmemory-policy"></a>3.maxmemory-policy</h3><ul><li>volatile-lru：使用LRU算法移除key，只对设置了过期时间的键；（最近最少使用）</li><li>allkeys-lru：在所有集合key中，使用LRU算法移除key</li><li>volatile-random：在过期集合中移除随机的key，只对设置了过期时间的键 </li><li>allkeys-random：在所有集合key中，移除随机的key </li><li>volatile-ttl：移除那些TTL值最小的key，即那些最近要过期的key</li><li>noeviction：不进行移除。针对写操作，只是返回错误信息</li></ul><h3 id="4-maxmemory-samples"><a href="#4-maxmemory-samples" class="headerlink" title="4. maxmemory-samples"></a>4. maxmemory-samples</h3><ul><li>设置样本数量，LRU算法和最小TTL算法都并非是精确的算法，而是估算值，所以你可以设置样本的大小，redis默认会检查这么多个key并选择其中LRU的那个。</li><li>一般设置3到7的数字，数值越小样本越不准确，但性能消耗越小。</li></ul><h1 id="2-发布和订阅"><a href="#2-发布和订阅" class="headerlink" title="2.发布和订阅"></a>2.发布和订阅</h1><ul><li><p>Redis 发布订阅 (pub/sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。</p></li><li><p>Redis 客户端可以订阅任意数量的频道。</p></li></ul><p><img src="/2022/09/25/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cimage-20220925154407498.png" alt="image-20220925154407498"></p><p><img src="/2022/09/25/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cimage-20220925154412698.png" alt="image-20220925154412698"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 打开一个客户端订阅channel1</span><br><span class="line">SUBSCRIBE channel1</span><br><span class="line"># 打卡另一个客户端</span><br><span class="line">publish channel1 hello</span><br><span class="line"></span><br><span class="line"># 第一个客户端就可以看到消息</span><br></pre></td></tr></table></figure><h1 id="3-redis6的新增数据类型"><a href="#3-redis6的新增数据类型" class="headerlink" title="3.redis6的新增数据类型"></a>3.redis6的新增数据类型</h1><h2 id="1-Bitmaps"><a href="#1-Bitmaps" class="headerlink" title="1.Bitmaps"></a>1.Bitmaps</h2><p>现代计算机用二进制（位） 作为信息的基础单位， 1个字节等于8位， 例如“abc”字符串是由3个字节组成， 但实际在计算机存储时将其用二进制表示， “abc”分别对应的ASCII码分别是97、 98、 99， 对应的二进制分别是01100001、 01100010和01100011，如下图</p><p><img src alt="img"> </p><p>合理地使用操作位能够有效地提高内存使用率和开发效率。</p><p>​    Redis提供了Bitmaps这个“数据类型”可以实现对位的操作：</p><p>（1） Bitmaps本身不是一种数据类型， 实际上它就是字符串（key-value） ， 但是它可以对字符串的位进行操作。</p><p>（2） Bitmaps单独提供了一套命令， 所以在Redis中使用Bitmaps和使用字符串的方法不太相同。 可以把Bitmaps想象成一个以位为单位的数组， 数组的每个单元只能存储0和1， 数组的下标在Bitmaps中叫做偏移量。</p><p><img src alt="img"> </p><h2 id="2-HypertLogLog"><a href="#2-HypertLogLog" class="headerlink" title="2. HypertLogLog"></a>2. HypertLogLog</h2><p>在工作当中，我们经常会遇到与统计相关的功能需求，比如统计网站PV（PageView页面访问量）,可以使用Redis的incr、incrby轻松实现。</p><p>但像UV（UniqueVisitor，独立访客）、独立IP数、搜索记录数等需要去重和计数的问题如何解决？这种求集合中不重复元素个数的问题称为基数问题。</p><p>解决基数问题有很多种方案：</p><p>（1）数据存储在MySQL表中，使用distinct count计算不重复个数</p><p>（2）使用Redis提供的hash、set、bitmaps等数据结构来处理</p><p>以上的方案结果精确，但随着数据不断增加，导致占用空间越来越大，对于非常大的数据集是不切实际的。</p><p>能否能够降低一定的精度来平衡存储空间？Redis推出了HyperLogLog</p><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p><p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p><p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p><p>什么是基数?</p><p>比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。</p><p><em><strong>*命令*</strong></em></p><p>1、pfadd </p><p>（1）格式</p><p>pfadd <key>&lt; element&gt; [element …]  添加指定元素到 HyperLogLog 中</key></p><p><img src="/2022/09/25/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cwps14.jpg" alt="img"> </p><p>（2）实例</p><p><img src="/2022/09/25/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cwps15.jpg" alt="img"> </p><p>​    将所有元素添加到指定HyperLogLog数据结构中。如果执行命令后HLL估计的近似基数发生变化，则返回1，否则返回0。</p><p>2、pfcount</p><p>（1）格式</p><p>pfcount<key> [key …] 计算HLL的近似基数，可以计算多个HLL，比如用HLL存储每天的UV，计算一周的UV可以使用7天的UV合并计算即可</key></p><p><img src="/2022/09/25/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cwps16.jpg" alt="img"> </p><p>（2）实例</p><p><img src="/2022/09/25/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cwps17.jpg" alt="img"> </p><p>3、pfmerge</p><p>（1）格式</p><p>pfmerge<destkey><sourcekey> [sourcekey …]  将一个或多个HLL合并后的结果存储在另一个HLL中，比如每月活跃用户可以使用每天的活跃用户来合并计算可得</sourcekey></destkey></p><p><img src="/2022/09/25/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cwps18.jpg" alt="img"> </p><p>（2）实例</p><p><img src="/2022/09/25/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cwps19.jpg" alt="img"> </p><h2 id="3-Geospatial"><a href="#3-Geospatial" class="headerlink" title="3. Geospatial"></a>3. Geospatial</h2><p><em><strong>*简介*</strong></em></p><p>Redis 3.2 中增加了对GEO类型的支持。GEO，Geographic，地理信息的缩写。该类型，就是元素的2维坐标，在地图上就是经纬度。redis基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度Hash等常见操作。</p><p><em><strong>*命令*</strong></em></p><p>1、geoadd</p><p>（1）格式</p><p>geoadd<key>&lt; longitude&gt;<latitude><member> [longitude latitude member…]  添加地理位置（经度，纬度，名称）</member></latitude></key></p><p><img src="/2022/09/25/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cwps20.jpg" alt="img"> </p><p>（2）实例</p><p>geoadd china:city 121.47 31.23 shanghai</p><p>geoadd china:city 106.50 29.53 chongqing 114.05 22.52 shenzhen 116.38 39.90 beijing</p><p><img src="/2022/09/25/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cwps21.jpg" alt="img"> </p><p>两极无法直接添加，一般会下载城市数据，直接通过 Java 程序一次性导入。</p><p>有效的经度从 -180 度到 180 度。有效的纬度从 -85.05112878 度到 85.05112878 度。</p><p>当坐标位置超出指定范围时，该命令将会返回一个错误。</p><p>已经添加的数据，是无法再次往里面添加的。</p><p>2、geopos  </p><p>（1）格式</p><p>geopos  <key><member> [member…]  获得指定地区的坐标值</member></key></p><p><img src="/2022/09/25/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cwps22.jpg" alt="img"> </p><p>（2）实例</p><p><img src="/2022/09/25/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cwps23.jpg" alt="img"> </p><p>3、geodist</p><p>（1）格式</p><p>geodist<key><member1><member2>  [m|km|ft|mi ]  获取两个位置之间的直线距离</member2></member1></key></p><p><img src="/2022/09/25/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cwps24.jpg" alt="img"> </p><p>（2）实例</p><p>获取两个位置之间的直线距离</p><p><img src="/2022/09/25/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cwps25.jpg" alt="img"> </p><p>单位：</p><p>m 表示单位为米[默认值]。</p><p>km 表示单位为千米。</p><p>mi 表示单位为英里。</p><p>ft 表示单位为英尺。</p><p>如果用户没有显式地指定单位参数， 那么 GEODIST 默认使用米作为单位</p><p>4、georadius</p><p>（1）格式</p><p>georadius<key>&lt; longitude&gt;<latitude>radius m|km|ft|mi  以给定的经纬度为中心，找出某一半径内的元素</latitude></key></p><p>经度 纬度 距离 单位</p><p>（2）实例</p><p><img src="/2022/09/25/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cwps27.jpg" alt="img"> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-redis配置&quot;&gt;&lt;a href=&quot;#1-redis配置&quot; class=&quot;headerlink&quot; title=&quot;1.redis配置&quot;&gt;&lt;/a&gt;1.redis配置&lt;/h1&gt;&lt;h2 id=&quot;1-1-Units单位&quot;&gt;&lt;a href=&quot;#1-1-Units单位&quot; c</summary>
      
    
    
    
    
    <category term="redis6" scheme="http://www.pangtouyu77.fun/tags/redis6/"/>
    
  </entry>
  
  <entry>
    <title>redis主从复制以及集群</title>
    <link href="http://www.pangtouyu77.fun/2022/09/25/redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%BB%A5%E5%8F%8A%E9%9B%86%E7%BE%A4/"/>
    <id>http://www.pangtouyu77.fun/2022/09/25/redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%BB%A5%E5%8F%8A%E9%9B%86%E7%BE%A4/</id>
    <published>2022-09-25T03:15:51.000Z</published>
    <updated>2022-10-19T08:37:12.163Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h1><h2 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h2><p>主机数据更新后根据配置和策略， 自动同步到备机的master/slaver机制，Master以写为主，Slave以读为主。</p><p>特点：</p><ul><li><p>读写分离，性能扩展</p></li><li><p>容灾快速恢复</p></li></ul><p><img src="/2022/09/25/redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%BB%A5%E5%8F%8A%E9%9B%86%E7%BE%A4/redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%BB%A5%E5%8F%8A%E9%9B%86%E7%BE%A4%5Cimage-20220925184219514.png" alt="image-20220925184219514"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h4 id="拷贝多个redis-conf文件"><a href="#拷贝多个redis-conf文件" class="headerlink" title="拷贝多个redis.conf文件"></a>拷贝多个redis.conf文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 新建redis6379.conf文件</span><br><span class="line">include /myredis/redis.conf</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line">port 6379</span><br><span class="line">dbfilename dump6379.rdb</span><br><span class="line"></span><br><span class="line">// 新建redis6380.conf文件</span><br><span class="line">include /myredis/redis.conf</span><br><span class="line">pidfile /var/run/redis_6380.pid</span><br><span class="line">port 6380</span><br><span class="line">dbfilename dump6380.rdb</span><br><span class="line"></span><br><span class="line">// 新建redis6381.conf文件</span><br><span class="line">include /myredis/redis.conf</span><br><span class="line">pidfile /var/run/redis_6381.pid</span><br><span class="line">port 6381</span><br><span class="line">dbfilename dump6381.rdb</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后分别启动  </p><p><img src="/2022/09/25/redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%BB%A5%E5%8F%8A%E9%9B%86%E7%BE%A4/redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%BB%A5%E5%8F%8A%E9%9B%86%E7%BE%A4%5Cimage-20220925184541505.png" alt="image-20220925184541505"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">info replication</span><br><span class="line">//打印主从复制的相关信息</span><br></pre></td></tr></table></figure><h4 id="配从库"><a href="#配从库" class="headerlink" title="配从库"></a>配从库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slaveof  &lt;ip&gt;&lt;port&gt;</span><br><span class="line">//成为某个实例的从服务器,在80  81上执行</span><br></pre></td></tr></table></figure><p>在主机上写，在从机上可以读取数据，此时在从机上写将报错</p><p><img src="/2022/09/25/redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%BB%A5%E5%8F%8A%E9%9B%86%E7%BE%A4/redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%BB%A5%E5%8F%8A%E9%9B%86%E7%BE%A4%5Cimage-20220925184832449.png" alt="image-20220925184832449"></p><h4 id="如果挂掉"><a href="#如果挂掉" class="headerlink" title="如果挂掉"></a>如果挂掉</h4><ul><li><p>主机挂掉，重启就行，一切如初</p></li><li><p>从机重启需重设：slaveof 127.0.0.1 6379</p></li><li><p>可以将配置增加到文件中。永久生效。</p><p><img src="/2022/09/25/redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%BB%A5%E5%8F%8A%E9%9B%86%E7%BE%A4/redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%BB%A5%E5%8F%8A%E9%9B%86%E7%BE%A4%5Cimage-20220925184931837.png" alt="image-20220925184931837"></p></li></ul><h2 id="常用三点以及复制原理"><a href="#常用三点以及复制原理" class="headerlink" title="常用三点以及复制原理"></a>常用三点以及复制原理</h2><h4 id="一主二仆"><a href="#一主二仆" class="headerlink" title="一主二仆"></a>一主二仆</h4><p>切入点问题？slave1、slave2是从头开始复制还是从切入点开始复制?比如从k4进来，那之前的k1,k2,k3是否也可以复制？</p><p>从机是否可以写？set可否？ </p><p>主机shutdown后情况如何？从机是上位还是原地待命？</p><p>主机又回来了后，主机新增记录，从机还能否顺利复制？ </p><p>其中一台从机down后情况如何？依照原有它能跟上大部队吗？</p><p><img src="/2022/09/25/redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%BB%A5%E5%8F%8A%E9%9B%86%E7%BE%A4/redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%BB%A5%E5%8F%8A%E9%9B%86%E7%BE%A4%5Cwps42.png" alt="img"> </p><h4 id="薪火相传"><a href="#薪火相传" class="headerlink" title="薪火相传"></a>薪火相传</h4><p>上一个Slave可以是下一个slave的Master，Slave同样可以接收其他 slaves的连接和同步请求，那么该slave作为了链条中下一个的master, 可以有效减轻master的写压力,去中心化降低风险。</p><p>用 slaveof  <ip><port></port></ip></p><p>中途变更转向:会清除之前的数据，重新建立拷贝最新的</p><p>风险是一旦某个slave宕机，后面的slave都没法备份</p><p>主机挂了，从机还是从机，无法写数据了</p><p><img src="/2022/09/25/redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%BB%A5%E5%8F%8A%E9%9B%86%E7%BE%A4/redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%BB%A5%E5%8F%8A%E9%9B%86%E7%BE%A4%5Cwps43.png" alt="img"> </p><p><img src="/2022/09/25/redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%BB%A5%E5%8F%8A%E9%9B%86%E7%BE%A4/redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%BB%A5%E5%8F%8A%E9%9B%86%E7%BE%A4%5Cwps44.png" alt="img"> </p><h4 id="反客为主"><a href="#反客为主" class="headerlink" title="反客为主"></a>反客为主</h4><p>当一个master宕机后，后面的slave可以立刻升为master，其后面的slave不用做任何修改。</p><p>用 slaveof  no one  将从机变为主机。</p><p><img src="/2022/09/25/redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%BB%A5%E5%8F%8A%E9%9B%86%E7%BE%A4/redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%BB%A5%E5%8F%8A%E9%9B%86%E7%BE%A4%5Cwps45.png" alt="img"> </p><h4 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h4><ul><li><p>Slave启动成功连接到master后会发送一个sync命令</p></li><li><p>Master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令， 在后台进程执行完毕之后，master将传送整个数据文件到slave,以完成一次完全同步</p></li><li><p>全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</p></li><li><p>增量复制：Master继续将新的所有收集到的修改命令依次传给slave,完成同步</p></li><li><p>但是只要是重新连接master,一次完全同步（全量复制)将被自动执行</p></li></ul><p><img src alt="img"> </p><h1 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h1><h3 id="概括-1"><a href="#概括-1" class="headerlink" title="概括"></a>概括</h3><p>****反客为主的自动版****，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><h3 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h3><h3 id="主从复制-1"><a href="#主从复制-1" class="headerlink" title="主从复制"></a>主从复制</h3><h1 id="redis集群"><a href="#redis集群" class="headerlink" title="redis集群"></a>redis集群</h1><h3 id="概括-2"><a href="#概括-2" class="headerlink" title="概括"></a>概括</h3><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><h3 id="故障恢复-1"><a href="#故障恢复-1" class="headerlink" title="故障恢复"></a>故障恢复</h3><h3 id="主从复制-2"><a href="#主从复制-2" class="headerlink" title="主从复制"></a>主从复制</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;主从复制&quot;&gt;&lt;a href=&quot;#主从复制&quot; class=&quot;headerlink&quot; title=&quot;主从复制&quot;&gt;&lt;/a&gt;主从复制&lt;/h1&gt;&lt;h2 id=&quot;概括&quot;&gt;&lt;a href=&quot;#概括&quot; class=&quot;headerlink&quot; title=&quot;概括&quot;&gt;&lt;/a&gt;概括&lt;/h</summary>
      
    
    
    
    
    <category term="蜗牛学院笔记" scheme="http://www.pangtouyu77.fun/tags/%E8%9C%97%E7%89%9B%E5%AD%A6%E9%99%A2%E7%AC%94%E8%AE%B0/"/>
    
    <category term="redis6" scheme="http://www.pangtouyu77.fun/tags/redis6/"/>
    
    <category term="主从复制" scheme="http://www.pangtouyu77.fun/tags/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    
    <category term="redis集群" scheme="http://www.pangtouyu77.fun/tags/redis%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>redis分布式锁</title>
    <link href="http://www.pangtouyu77.fun/2022/09/25/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>http://www.pangtouyu77.fun/2022/09/25/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</id>
    <published>2022-09-25T03:15:02.000Z</published>
    <updated>2022-09-25T03:15:02.636Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>redis6基础操作</title>
    <link href="http://www.pangtouyu77.fun/2022/09/25/redis6%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.pangtouyu77.fun/2022/09/25/redis6%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</id>
    <published>2022-09-25T03:13:02.000Z</published>
    <updated>2022-10-19T08:34:58.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-jedis测试"><a href="#1-jedis测试" class="headerlink" title="1. jedis测试"></a>1. jedis测试</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// Jedis所需要的jar包</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.2.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>注意事项</p><ul><li><p>禁用Linux的防火墙：Linux(CentOS7)里执行命令</p></li><li><p><em><strong>*systemctl stop/disable firewalld.service*</strong></em>  </p></li><li><p>redis.conf中注释掉bind 127.0.0.1 ,然后 protected-mode no</p></li></ul><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 测试程序</span><br><span class="line">package com.atguigu.jedis;</span><br><span class="line">import redis.clients.jedis.Jedis;</span><br><span class="line">public class Demo01 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Jedis jedis = new Jedis(&quot;192.168.137.3&quot;,6379);</span><br><span class="line">String pong = jedis.ping();</span><br><span class="line">System.out.println(&quot;连接成功：&quot;+pong);</span><br><span class="line">jedis.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">// 相关数据类型</span><br><span class="line"></span><br><span class="line">//     Key</span><br><span class="line">jedis.set(&quot;k1&quot;, &quot;v1&quot;);</span><br><span class="line">jedis.set(&quot;k2&quot;, &quot;v2&quot;);</span><br><span class="line">jedis.set(&quot;k3&quot;, &quot;v3&quot;);</span><br><span class="line">Set&lt;String&gt; keys = jedis.keys(&quot;*&quot;);</span><br><span class="line">System.out.println(keys.size());</span><br><span class="line">for (String key : keys) &#123;</span><br><span class="line">System.out.println(key);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(jedis.exists(&quot;k1&quot;));</span><br><span class="line">System.out.println(jedis.ttl(&quot;k1&quot;));                </span><br><span class="line">System.out.println(jedis.get(&quot;k1&quot;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//String</span><br><span class="line">jedis.mset(&quot;str1&quot;,&quot;v1&quot;,&quot;str2&quot;,&quot;v2&quot;,&quot;str3&quot;,&quot;v3&quot;);</span><br><span class="line">System.out.println(jedis.mget(&quot;str1&quot;,&quot;str2&quot;,&quot;str3&quot;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//List</span><br><span class="line">List&lt;String&gt; list = jedis.lrange(&quot;mylist&quot;,0,-1);</span><br><span class="line">for (String element : list) &#123;</span><br><span class="line">System.out.println(element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//set</span><br><span class="line">jedis.sadd(&quot;orders&quot;, &quot;order01&quot;);</span><br><span class="line">jedis.sadd(&quot;orders&quot;, &quot;order02&quot;);</span><br><span class="line">jedis.sadd(&quot;orders&quot;, &quot;order03&quot;);</span><br><span class="line">jedis.sadd(&quot;orders&quot;, &quot;order04&quot;);</span><br><span class="line">Set&lt;String&gt; smembers = jedis.smembers(&quot;orders&quot;);</span><br><span class="line">for (String order : smembers) &#123;</span><br><span class="line">System.out.println(order);</span><br><span class="line">&#125;</span><br><span class="line">jedis.srem(&quot;orders&quot;, &quot;order02&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//hash</span><br><span class="line">jedis.hset(&quot;hash1&quot;,&quot;userName&quot;,&quot;lisi&quot;);</span><br><span class="line">System.out.println(jedis.hget(&quot;hash1&quot;,&quot;userName&quot;));</span><br><span class="line">Map&lt;String,String&gt; map = new HashMap&lt;String,String&gt;();</span><br><span class="line">map.put(&quot;telphone&quot;,&quot;13810169999&quot;);</span><br><span class="line">map.put(&quot;address&quot;,&quot;atguigu&quot;);</span><br><span class="line">map.put(&quot;email&quot;,&quot;abc@163.com&quot;);</span><br><span class="line">jedis.hmset(&quot;hash2&quot;,map);</span><br><span class="line">List&lt;String&gt; result = jedis.hmget(&quot;hash2&quot;, &quot;telphone&quot;,&quot;email&quot;);</span><br><span class="line">for (String element : result) &#123;</span><br><span class="line">System.out.println(element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//zset</span><br><span class="line">jedis.hset(&quot;hash1&quot;,&quot;userName&quot;,&quot;lisi&quot;);</span><br><span class="line">System.out.println(jedis.hget(&quot;hash1&quot;,&quot;userName&quot;));</span><br><span class="line">Map&lt;String,String&gt; map = new HashMap&lt;String,String&gt;();</span><br><span class="line">map.put(&quot;telphone&quot;,&quot;13810169999&quot;);</span><br><span class="line">map.put(&quot;address&quot;,&quot;atguigu&quot;);</span><br><span class="line">map.put(&quot;email&quot;,&quot;abc@163.com&quot;);</span><br><span class="line">jedis.hmset(&quot;hash2&quot;,map);</span><br><span class="line">List&lt;String&gt; result = jedis.hmget(&quot;hash2&quot;, &quot;telphone&quot;,&quot;email&quot;);</span><br><span class="line">for (String element : result) &#123;</span><br><span class="line">System.out.println(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-redis和springboot整合"><a href="#2-redis和springboot整合" class="headerlink" title="2. redis和springboot整合"></a>2. redis和springboot整合</h1><h3 id="2-1-相关配置"><a href="#2-1-相关配置" class="headerlink" title="2.1 相关配置"></a>2.1 相关配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- redis --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- spring2.X集成redis所需common-pool2--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.6.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#Redis服务器地址</span><br><span class="line">spring.redis.host=192.168.140.136</span><br><span class="line">#Redis服务器连接端口</span><br><span class="line">spring.redis.port=6379</span><br><span class="line">#Redis数据库索引（默认为0）</span><br><span class="line">spring.redis.database= 0</span><br><span class="line">#连接超时时间（毫秒）</span><br><span class="line">spring.redis.timeout=1800000</span><br><span class="line">#连接池最大连接数（使用负值表示没有限制）</span><br><span class="line">spring.redis.lettuce.pool.max-active=20</span><br><span class="line">#最大阻塞等待时间(负数表示没限制)</span><br><span class="line">spring.redis.lettuce.pool.max-wait=-1</span><br><span class="line">#连接池中的最大空闲连接</span><br><span class="line">spring.redis.lettuce.pool.max-idle=5</span><br><span class="line">#连接池中的最小空闲连接</span><br><span class="line">spring.redis.lettuce.pool.min-idle=0</span><br></pre></td></tr></table></figure><h3 id="2-2-redisconfig类"><a href="#2-2-redisconfig类" class="headerlink" title="2.2 redisconfig类"></a>2.2 redisconfig类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">@EnableCaching</span><br><span class="line">@Configuration</span><br><span class="line">public class RedisConfig extends CachingConfigurerSupport &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory factory) &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;&gt;();</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = new StringRedisSerializer();</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper om = new ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">//key序列化方式</span><br><span class="line">        template.setKeySerializer(redisSerializer);</span><br><span class="line">//value序列化</span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">//value hashmap序列化</span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        return template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public CacheManager cacheManager(RedisConnectionFactory factory) &#123;</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = new StringRedisSerializer();</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">//解决查询缓存转换异常的问题</span><br><span class="line">        ObjectMapper om = new ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">// 配置序列化（解决乱码的问题）,过期时间600秒</span><br><span class="line">        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .entryTtl(Duration.ofSeconds(600))</span><br><span class="line">                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))</span><br><span class="line">                .disableCachingNullValues();</span><br><span class="line">        RedisCacheManager cacheManager = RedisCacheManager.builder(factory)</span><br><span class="line">                .cacheDefaults(config)</span><br><span class="line">                .build();</span><br><span class="line">        return cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-测试一下"><a href="#2-3-测试一下" class="headerlink" title="2.3 测试一下"></a>2.3 测试一下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/redisTest&quot;)</span><br><span class="line">public class RedisTestController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    @GetMapping</span><br><span class="line">    public String testRedis() &#123;</span><br><span class="line">        //设置值到redis</span><br><span class="line">        redisTemplate.opsForValue().set(&quot;name&quot;,&quot;lucy&quot;);</span><br><span class="line">        //从redis获取值</span><br><span class="line">        String name = (String)redisTemplate.opsForValue().get(&quot;name&quot;);</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-事务和锁机制"><a href="#3-事务和锁机制" class="headerlink" title="3. 事务和锁机制"></a>3. 事务和锁机制</h1><h3 id="3-1-redis事务定义"><a href="#3-1-redis事务定义" class="headerlink" title="3.1 redis事务定义"></a>3.1 redis事务定义</h3><p>Redis事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p><p>Redis事务的主要作用就是串联多个命令防止别的命令插队。</p><h3 id="3-2-Multi、Exec、discard"><a href="#3-2-Multi、Exec、discard" class="headerlink" title="3.2 Multi、Exec、discard"></a>3.2 Multi、Exec、discard</h3><p>从输入Multi命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入Exec后，Redis会将之前的命令队列中的命令依次执行。</p><p><img src="/2022/09/25/redis6%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cimage-20220925163339262.png" alt="image-20220925163339262"></p><h3 id="3-3-事务的错误处理"><a href="#3-3-事务的错误处理" class="headerlink" title="3.3 事务的错误处理"></a>3.3 事务的错误处理</h3><p>组队中某个命令出现了报告错误，执行时整个的所有队列都会被取消。</p><p><img src="/2022/09/25/redis6%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cimage-20220925163515323.png" alt="image-20220925163515323"></p><p>如果执行阶段某个命令报出了错误，则只有报错的命令不会被执行，而其他的命令都会执行，不会回滚。</p><p><img src="/2022/09/25/redis6%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cimage-20220925163531617.png" alt="image-20220925163531617"></p><h3 id="3-5-事务冲突的问题"><a href="#3-5-事务冲突的问题" class="headerlink" title="3.5 事务冲突的问题"></a>3.5 事务冲突的问题</h3><h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><p><img src alt="img"></p><p><em><strong>*悲观锁(Pessimistic Lock)*</strong></em>, 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。****传统的关系型数据库里边就用到了很多这种锁机制*<em><strong>，比如</strong></em>*行锁*<em><strong>，</strong></em>*表锁*<em><strong>等，</strong></em>*读锁*<em><strong>，</strong></em>*写锁****等，都是在做操作之前先上锁。</p><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><p><img src alt="img"></p><p><em><strong>*乐观锁(Optimistic Lock)*</strong></em><em><strong>*,*</strong></em> 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。****乐观锁适用于多读的应用类型，这样可以提高吞吐量****。Redis就是利用这种check-and-set机制实现事务的。</p><h4 id="WATCH-key-key-…"><a href="#WATCH-key-key-…" class="headerlink" title="WATCH key [key …]"></a>WATCH key [key …]</h4><p>在执行multi之前，先执行watch key1 [key2],可以监视一个(或多个) key ，如果在事务<em><strong>*执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。*</strong></em></p><p><img src="/2022/09/25/redis6%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cimage-20220925164805563.png" alt="image-20220925164805563"></p><h4 id="unwatch"><a href="#unwatch" class="headerlink" title="unwatch"></a>unwatch</h4><p>取消 WATCH 命令对所有 key 的监视。</p><p>如果在执行 WATCH 命令之后，EXEC 命令或DISCARD 命令先被执行了的话，那么就不需要再执行UNWATCH 了。</p><p><a class="link" href="http://doc.redisfans.com/transaction/exec.html">http://doc.redisfans.com/transaction/exec.html<i class="fas fa-external-link-alt"></i></a></p><h3 id="3-6-Redis-事务三特性"><a href="#3-6-Redis-事务三特性" class="headerlink" title="3.6 Redis 事务三特性"></a>3.6 Redis 事务三特性</h3><p>Ø 单独的隔离操作 </p><p>事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。 </p><p>Ø 没有隔离级别的概念 </p><p>队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行</p><p>Ø 不保证原子性 </p><p>事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚 </p><h3 id="3-7-Redis——事务——秒杀案例"><a href="#3-7-Redis——事务——秒杀案例" class="headerlink" title="3.7 Redis——事务——秒杀案例"></a>3.7 Redis——事务——秒杀案例</h3><h1 id="4-持久化-RDB、AOF"><a href="#4-持久化-RDB、AOF" class="headerlink" title="4. 持久化 (RDB、AOF)"></a>4. 持久化 (RDB、AOF)</h1><h2 id="RDB（Redis-DataBase）"><a href="#RDB（Redis-DataBase）" class="headerlink" title="RDB（Redis DataBase）"></a>RDB（Redis DataBase）</h2><h3 id="1-如何执行的"><a href="#1-如何执行的" class="headerlink" title="1.如何执行的"></a>1.如何执行的</h3><p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到 一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。 整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能 如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。<em><strong>*RDB的缺点是*</strong></em>****最后一次持久化后的数据可能丢失****。</p><h3 id="2-fork"><a href="#2-fork" class="headerlink" title="2.fork"></a>2.fork</h3><ul><li>Fork的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等） 数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程</li><li> 在Linux程序中，fork()会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调用，出于效率考虑，Linux中引入了“****写时复制技术****”</li><li> 一般情况父进程和子进程会共用同一段物理内存，只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。</li></ul><h3 id="3-持久化流程"><a href="#3-持久化流程" class="headerlink" title="3.持久化流程"></a>3.持久化流程</h3><p><img src="/2022/09/25/redis6%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cimage-20220925171549740.png" alt="image-20220925171549740"></p><h3 id="4-配置"><a href="#4-配置" class="headerlink" title="4. 配置"></a>4. 配置</h3><p><em><strong>*dump.rdb文件*</strong></em></p><p>在redis.conf中配置文件名称，默认为dump.rdb</p><p><img src="/2022/09/25/redis6%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cwps30.jpg" alt="img"> </p><p><em><strong>*配置位置*</strong></em></p><p>rdb文件的保存路径，也可以修改。默认为Redis启动时命令行所在的目录下</p><p>dir “/myredis/“</p><p><img src="/2022/09/25/redis6%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cwps31.jpg" alt="img"> </p><p><em><strong>*如何触发RDB快照；保持策略*</strong></em></p><p><em><strong>*配置文件中默认的快照配置*</strong></em></p><p><img src="/2022/09/25/redis6%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cwps32.jpg" alt="img"> </p><p><em><strong>*命令*</strong></em><em><strong>*save VS bgsave*</strong></em></p><p>save ：save时只管保存，其它不管，全部阻塞。手动保存。不建议。</p><p><em><strong>*bgsave：*</strong></em><em><strong>*Redis*</strong></em><em><strong>*会在后台异步进行快照操作， 快照同时还可以响应客户端请求。*</strong></em></p><p>可以通过lastsave 命令获取最后一次成功执行快照的时间</p><p><em><strong>*flushall*</strong></em><em><strong>*命令*</strong></em></p><p>执行flushall命令，也会产生dump.rdb文件，但里面是空的，无意义</p><p><em><strong>*###SNAPSHOTTING*</strong></em><em><strong>*快照*</strong></em><em><strong>*###*</strong></em></p><p><em><strong>*Save*</strong></em></p><p>格式：save 秒钟 写操作次数</p><p>RDB是整个内存的压缩过的Snapshot，RDB的数据结构，可以配置复合的快照触发条件，</p><p><em><strong>*默认是1分钟内改了*</strong></em><em><strong>*1*</strong></em><em><strong>*万次，或*</strong></em><em><strong>*5*</strong></em><em><strong>*分钟内改了*</strong></em><em><strong>*10*</strong></em><em><strong>*次，或*</strong></em><em><strong>*15*</strong></em><em><strong>*分钟内改了*</strong></em><em><strong>*1*</strong></em><em><strong>*次。*</strong></em></p><p>禁用</p><p>不设置save指令，或者给save传入空字符串</p><p><em><strong>*stop-writes-on-bgsave-error*</strong></em></p><p><img src="/2022/09/25/redis6%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cwps33.jpg" alt="img"> </p><p>当Redis无法写入磁盘的话，直接关掉Redis的写操作。推荐yes.</p><p><em><strong>*rdbcompression*</strong></em> <em><strong>*压缩文件*</strong></em></p><p><img src="/2022/09/25/redis6%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cwps34.jpg" alt="img"> </p><p>对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis会采用LZF算法进行压缩。</p><p>如果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能。推荐yes.</p><p><em><strong>*rdbchecksum*</strong></em> <em><strong>*检查完整性*</strong></em></p><p><img src="/2022/09/25/redis6%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cwps35.jpg" alt="img"> </p><p>在存储快照后，还可以让redis使用CRC64算法来进行数据校验，</p><p>但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能</p><p>推荐yes.</p><p><em><strong>*rdb*</strong></em><em><strong>*的备份*</strong></em></p><p>先通过config get dir  查询rdb文件的目录 </p><p>将*.rdb的文件拷贝到别的地方</p><p>rdb的恢复</p><ul><li><p>关闭Redis</p></li><li><p>先把备份的文件拷贝到工作目录下 cp dump2.rdb dump.rdb</p></li><li><p>启动Redis, 备份数据会直接加载</p></li></ul><h3 id="5总结"><a href="#5总结" class="headerlink" title="5总结"></a>5总结</h3><p><em><strong>*优势*</strong></em></p><ul><li><p>适合大规模的数据恢复</p></li><li><p>对数据完整性和一致性要求不高更适合使用</p></li><li><p>节省磁盘空间</p></li><li><p>恢复速度快</p></li></ul><p><img src="/2022/09/25/redis6%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cwps36.png" alt="img"> </p><p><em><strong>*劣势*</strong></em></p><ul><li><p>Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑</p></li><li><p>虽然Redis在fork时使用了<em><strong>*写时拷贝技术*</strong></em>,但是如果数据庞大时还是比较消耗性能。</p></li><li><p>在备份周期在一定间隔时间做一次备份，所以如果Redis意外down掉的话，就会丢失最后一次快照后的所有修改。</p></li></ul><p><em><strong>*如何停止*</strong></em></p><p>动态停止RDB：redis-cli config set save “”#save后给空值，表示禁用保存策略</p><p><em><strong>*小总结*</strong></em></p><p><img src="/2022/09/25/redis6%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cwps37.png" alt="img"> </p><h3 id><a href="#" class="headerlink" title></a></h3><h2 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append Only File）"></a>AOF（Append Only File）</h2><h3 id="1-如何执行的-1"><a href="#1-如何执行的-1" class="headerlink" title="1.如何执行的"></a>1.如何执行的</h3><p>以<em><strong>*日志*<em><strong>的形式来记录每个写操作（增量保存），将Redis执行过的所有写指令记录下来(</strong></em>*读操作不记录*</strong></em>)， ****只许追加文件但不可以改写文件****，redis启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p><h3 id="2-流程"><a href="#2-流程" class="headerlink" title="2.流程"></a>2.流程</h3><p>（1）客户端的请求写命令会被append追加到AOF缓冲区内；</p><p>（2）AOF缓冲区根据AOF持久化策略[always,everysec,no]将操作sync同步到磁盘的AOF文件中；</p><p>（3）AOF文件大小超过重写策略或手动重写时，会对AOF文件rewrite重写，压缩AOF文件容量；</p><p>（4）Redis服务重启时，会重新load加载AOF文件中的写操作达到数据恢复的目的；</p><p><img src="/2022/09/25/redis6%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cwps38.jpg" alt="img"> </p><h3 id="3-配置"><a href="#3-配置" class="headerlink" title="3.配置"></a>3.配置</h3><h4 id="AOF默认不开启"><a href="#AOF默认不开启" class="headerlink" title="*AOF默认不开启*"></a><em><strong>*AOF默认不开启*</strong></em></h4><p>可以在redis.conf中配置文件名称，默认为 appendonly.aof</p><p>AOF文件的保存路径，同RDB的路径一致。</p><h4 id="AOF和RDB同时开启，redis听谁的？"><a href="#AOF和RDB同时开启，redis听谁的？" class="headerlink" title="*\ AOF和RDB同时开启，redis听谁的？*"></a>*<strong>\ <em>AOF和RDB同时开启，redis听谁的？*</em></strong></h4><p>AOF和RDB同时开启，系统默认取AOF的数据（数据不会存在丢失）</p><h4 id="AOF启动修复恢复"><a href="#AOF启动修复恢复" class="headerlink" title="*AOF启动修复恢复*"></a><em><strong>*AOF启动修复恢复*</strong></em></h4><ul><li><p>AOF的备份机制和性能虽然和RDB不同, 但是备份和恢复的操作同RDB一样，都是拷贝备份文件，需要恢复时再拷贝到Redis工作目录下，启动系统即加载。</p></li><li><p>正常恢复</p><ul><li> 修改默认的appendonly no，改为yes</li><li> 将有数据的aof文件复制一份保存到对应目录(查看目录：config get dir)</li><li>恢复：重启redis然后重新加载</li></ul></li><li><p>异常恢复</p><ul><li> 修改默认的appendonly no，改为yes</li><li> 如遇到****AOF文件损坏*<em><strong>，通过/usr/local/bin/</strong></em>*redis-check-aof–fix appendonly.aof****进行恢复</li><li> 备份被写坏的AOF文件</li><li>恢复：重启redis，然后重新加载</li></ul></li></ul><h4 id="AOF同步频率设置"><a href="#AOF同步频率设置" class="headerlink" title="*** AOF同步频率设置***"></a>*** <em>AOF同步频率设置*</em>**</h4><ul><li>appendfsync always</li></ul><p>始终同步，每次Redis的写入都会立刻记入日志；性能较差但数据完整性比较好</p><ul><li>appendfsync everysec</li></ul><p>每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。</p><ul><li>appendfsync no</li></ul><p>redis不主动进行同步，把同步时机交给操作系统。</p><h4 id="Rewrite压缩"><a href="#Rewrite压缩" class="headerlink" title="*\ Rewrite压缩*"></a>*<strong>\ <em>Rewrite压缩*</em></strong></h4><h5 id="1是什么："><a href="#1是什么：" class="headerlink" title="1是什么："></a>1是什么：</h5><p>AOF采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制, 当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩， 只保留可以恢复数据的最小指令集.可以使用命令bgrewriteaof</p><h5 id="2重写原理，如何实现重写"><a href="#2重写原理，如何实现重写" class="headerlink" title="2重写原理，如何实现重写"></a>2重写原理，如何实现重写</h5><p>AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename)，redis4.0版本后的重写，是指上就是把rdb 的快照，以二级制的形式附在新的aof头部，作为已有的历史数据，替换掉原来的流水账操作。</p><p>no-appendfsync-on-rewrite：</p><p>如果 no-appendfsync-on-rewrite=yes ,不写入aof文件只写入缓存，用户请求不会阻塞，但是在这段时间如果宕机会丢失这段时间的缓存数据。（降低数据安全性，提高性能）</p><p>​    如果 no-appendfsync-on-rewrite=no,  还是会把数据往磁盘里刷，但是遇到重写操作，可能会发生阻塞。（数据安全，但是性能降低）</p><p>触发机制，何时重写</p><p>Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发</p><p>重写虽然可以节约大量磁盘空间，减少恢复时间。但是每次重写还是有一定的负担的，因此设定Redis要满足一定条件才会进行重写。 </p><p>auto-aof-rewrite-percentage：设置重写的基准值，文件达到100%时开始重写（文件是原来重写后文件的2倍时触发）</p><p>auto-aof-rewrite-min-size：设置重写的基准值，最小文件64MB。达到这个值开始重写。</p><p>例如：文件达到70MB开始重写，降到50MB，下次什么时候开始重写？100MB</p><p>系统载入时或者上次重写完毕时，Redis会记录此时AOF大小，设为base_size,</p><p>如果Redis的AOF当前大小&gt;= base_size +base_size*100% (默认)且当前大小&gt;=64mb(默认)的情况下，Redis会对AOF进行重写。 </p><h5 id="3、重写流程"><a href="#3、重写流程" class="headerlink" title="3、重写流程"></a>3、重写流程</h5><p>（1）bgrewriteaof触发重写，判断是否当前有bgsave或bgrewriteaof在运行，如果有，则等待该命令结束后再继续执行。</p><p>（2）主进程fork出子进程执行重写操作，保证主进程不会阻塞。</p><p>（3）子进程遍历redis内存中数据到临时文件，客户端的写请求同时写入aof_buf缓冲区和aof_rewrite_buf重写缓冲区保证原AOF文件完整以及新AOF文件生成期间的新的数据修改动作不会丢失。</p><p>（4）1).子进程写完新的AOF文件后，向主进程发信号，父进程更新统计信息。2).主进程把aof_rewrite_buf中的数据写入到新的AOF文件。</p><p>（5）使用新的AOF文件覆盖旧的AOF文件，完成AOF重写。</p><p><img src="/2022/09/25/redis6%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/redis6%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cwps39.jpg" alt="img"> </p><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h3><h4 id="优势"><a href="#优势" class="headerlink" title="*优势*"></a><em><strong>*优势*</strong></em></h4><p><img src alt="img"> </p><p>n 备份机制更稳健，丢失数据概率更低。</p><p>n 可读的日志文本，通过操作AOF稳健，可以处理误操作。</p><h4 id="劣势"><a href="#劣势" class="headerlink" title="*劣势*"></a><em><strong>*劣势*</strong></em></h4><p>n 比起RDB占用更多的磁盘空间。</p><p>n 恢复备份速度要慢。</p><p>n 每次读写都同步的话，有一定的性能压力。</p><p>n 存在个别Bug，造成恢复不能。</p><h4 id="小总结"><a href="#小总结" class="headerlink" title="*小总结*"></a><em><strong>*小总结*</strong></em></h4><p><img src alt="img"> </p><h3 id="持久化哪一个好"><a href="#持久化哪一个好" class="headerlink" title="持久化哪一个好"></a>持久化哪一个好</h3><ul><li><p>官方推荐两个都启用。</p></li><li><p>如果对数据不敏感，可以选单独用RDB。</p></li><li><p>不建议单独用 AOF，因为可能会出现Bug。</p></li><li><p>如果只是做纯内存缓存，可以都不用。</p></li></ul><h5 id="官网建议："><a href="#官网建议：" class="headerlink" title="官网建议："></a>官网建议：</h5><ul><li><p>RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储</p></li><li><p>AOF持久化方式记录每次对服务器写的操作,当服务器重启的时候会重新执行这些命令来恢复原始的数据,AOF命令以redis协议追加保存每次写的操作到文件末尾. </p></li><li><p>Redis还能对AOF文件进行后台重写,使得AOF文件的体积不至于过大</p></li><li><p>只做缓存：如果你只希望你的数据在服务器运行的时候存在,你也可以不使用任何持久化方式.</p></li><li><p>同时开启两种持久化方式</p></li><li><p>在这种情况下,当redis重启的时候会优先载入AOF文件来恢复原始的数据, 因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整.</p></li><li><p>RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件。那要不要只使用AOF呢？ </p></li><li><p>建议不要，因为RDB更适合用于备份数据库(AOF在不断变化不好备份)， 快速重启，而且不会有AOF可能潜在的bug，留着作为一个万一的手段。</p></li><li><p>性能建议</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留save 900 1这条规则。</span><br><span class="line"> </span><br><span class="line">如果使用AOF，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了。</span><br><span class="line">代价,一是带来了持续的IO，二是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。</span><br><span class="line">只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上。</span><br><span class="line">默认超过原大小100%大小时重写可以改到适当的数值。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-jedis测试&quot;&gt;&lt;a href=&quot;#1-jedis测试&quot; class=&quot;headerlink&quot; title=&quot;1. jedis测试&quot;&gt;&lt;/a&gt;1. jedis测试&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;</summary>
      
    
    
    
    
    <category term="redis" scheme="http://www.pangtouyu77.fun/tags/redis/"/>
    
    <category term="jedis" scheme="http://www.pangtouyu77.fun/tags/jedis/"/>
    
    <category term="redistemplate" scheme="http://www.pangtouyu77.fun/tags/redistemplate/"/>
    
  </entry>
  
  <entry>
    <title>NoSQL数据库</title>
    <link href="http://www.pangtouyu77.fun/2022/09/25/NoSQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://www.pangtouyu77.fun/2022/09/25/NoSQL%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2022-09-25T02:31:12.000Z</published>
    <updated>2022-09-25T03:03:49.248Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-NoSQL数据库简介"><a href="#1-NoSQL数据库简介" class="headerlink" title="1.NoSQL数据库简介"></a>1.NoSQL数据库简介</h2><h3 id="1-1-技术发展"><a href="#1-1-技术发展" class="headerlink" title="1.1. 技术发展"></a>1.1. 技术发展</h3><p>技术的分类</p><p>1、解决功能性的问题：Java、Jsp、RDBMS、Tomcat、HTML、Linux、JDBC、SVN</p><p>2、解决扩展性的问题：Struts、Spring、SpringMVC、Hibernate、Mybatis</p><p>3、解决性能的问题：NoSQL、Java线程、Hadoop、Nginx、MQ、ElasticSearch</p><h4 id="1-1-1-Web1-0时代"><a href="#1-1-1-Web1-0时代" class="headerlink" title="1.1.1 Web1.0时代"></a>1.1.1 Web1.0时代</h4><p>数据访问量很有限，用一夫当关的高性能的单点服务器可以解决大部分问题。</p><p><img src="/2022/09/25/NoSQL%E6%95%B0%E6%8D%AE%E5%BA%93/NoSQL%E6%95%B0%E6%8D%AE%E5%BA%93%5Cimage-20220925103409381.png" alt="image-20220925103409381"></p><h4 id="1-1-2-Web2-0时代"><a href="#1-1-2-Web2-0时代" class="headerlink" title="1.1.2 Web2.0时代"></a>1.1.2 Web2.0时代</h4><p>随着Web2.0的时代的到来，用户访问量大幅度提升，同时产生了大量的用户数据。加上后来的智能移动设备的普及，所有的互联网平台都面临了巨大的性能挑战。</p><p><img src="/2022/09/25/NoSQL%E6%95%B0%E6%8D%AE%E5%BA%93/NoSQL%E6%95%B0%E6%8D%AE%E5%BA%93%5Cwps1.jpg" alt="img"></p><h4 id="1-1-3-解决CPU及内存压力"><a href="#1-1-3-解决CPU及内存压力" class="headerlink" title="1.1.3  解决CPU及内存压力"></a>1.1.3  解决CPU及内存压力</h4><p><img src="/2022/09/25/NoSQL%E6%95%B0%E6%8D%AE%E5%BA%93/NoSQL%E6%95%B0%E6%8D%AE%E5%BA%93%5Cimage-20220925103637208.png" alt="image-20220925103637208"></p><h4 id="1-1-4-解决IO压力"><a href="#1-1-4-解决IO压力" class="headerlink" title="1.1.4  解决IO压力"></a>1.1.4  解决IO压力</h4><p><img src="/2022/09/25/NoSQL%E6%95%B0%E6%8D%AE%E5%BA%93/NoSQL%E6%95%B0%E6%8D%AE%E5%BA%93%5Cimage-20220925104647041.png" alt="image-20220925104647041"></p><h3 id="1-2-NoSQL数据库"><a href="#1-2-NoSQL数据库" class="headerlink" title="1.2 NoSQL数据库"></a>1.2 NoSQL数据库</h3><h4 id="1-2-1-NoSQL数据库概述"><a href="#1-2-1-NoSQL数据库概述" class="headerlink" title="1.2.1  NoSQL数据库概述"></a>1.2.1  NoSQL数据库概述</h4><p>NoSQL(NoSQL = <em><strong>*Not Only SQL*</strong></em> )，意即“不仅仅是SQL”，泛指****非关系型的数据库****。 </p><p>NoSQL 不依赖业务逻辑方式存储，而以简单的key-value模式存储。因此大大的增加了数据库的扩展能力。</p><ul><li><p>不遵循SQL标准。</p></li><li><p>不支持ACID。</p></li><li><p>远超于SQL的性能。</p></li></ul><h4 id="1-2-2-NoSQL适用场景"><a href="#1-2-2-NoSQL适用场景" class="headerlink" title="1.2.2 NoSQL适用场景"></a>1.2.2 NoSQL适用场景</h4><ul><li><p>对数据高并发的读写</p></li><li><p>海量数据的读写</p></li><li><p>对数据高可扩展性的</p></li></ul><h4 id="1-2-3-NoSQL不适用场景"><a href="#1-2-3-NoSQL不适用场景" class="headerlink" title="1.2.3 NoSQL不适用场景"></a>1.2.3 NoSQL不适用场景</h4><ul><li><p>需要事务支持</p></li><li><p>基于sql的结构化查询存储，处理复杂的关系,需要即席查询。</p></li><li><p>用不着sql的和用了sql也不行的情况，请考虑用NoSql</p></li></ul><h4 id="1-2-4-数据库"><a href="#1-2-4-数据库" class="headerlink" title="1.2.4 数据库"></a>1.2.4 数据库</h4><ul><li><p>Memcahe</p><ul><li><p>很早出现的NoSql数据库</p></li><li><p>数据都在内存中，一般不持久化</p></li><li><p>支持简单的key-value模式，支持类型单一</p></li><li><p>一般是作为缓存数据库辅助持久化的数据库</p></li></ul></li><li><p>Redis</p><ul><li><p>几乎覆盖了Memcached的绝大部分功能</p></li><li><p>数据都在内存中，支持持久化，主要用作备份恢复</p></li><li><p>除了支持简单的key-value模式，还支持多种数据结构的存储，比如 list、set、hash、zset等。</p></li><li><p>一般是作为缓存数据库辅助持久化的数据库</p></li></ul></li><li><p>MongoDB</p><ul><li>高性能、开源、模式自由(schema  free)的<em><strong>*文档型数据库*</strong></em></li><li>数据都在内存中， 如果内存不足，把不常用的数据保存到硬盘</li><li>虽然是key-value模式，但是对value（尤其是****json****）提供了丰富的查询功能</li><li>支持二进制数据及大型对象</li><li>可以根据数据的特点<em><strong>*替代RDBMS*</strong></em> ，成为独立的数据库。或者配合RDBMS，存储特定的数据。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-NoSQL数据库简介&quot;&gt;&lt;a href=&quot;#1-NoSQL数据库简介&quot; class=&quot;headerlink&quot; title=&quot;1.NoSQL数据库简介&quot;&gt;&lt;/a&gt;1.NoSQL数据库简介&lt;/h2&gt;&lt;h3 id=&quot;1-1-技术发展&quot;&gt;&lt;a href=&quot;#1-1-技</summary>
      
    
    
    
    
    <category term="nosql" scheme="http://www.pangtouyu77.fun/tags/nosql/"/>
    
    <category term="尚硅谷redis6笔记" scheme="http://www.pangtouyu77.fun/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7redis6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>redis概括</title>
    <link href="http://www.pangtouyu77.fun/2022/09/19/redis%E6%A6%82%E6%8B%AC/"/>
    <id>http://www.pangtouyu77.fun/2022/09/19/redis%E6%A6%82%E6%8B%AC/</id>
    <published>2022-09-19T11:14:13.000Z</published>
    <updated>2022-10-19T08:37:01.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h2><p>Redis（==Re==mote ==Di==ctionary ==S==erver），即远程字典服务。</p><p>Redis是用C语言编写的完全开源的、遵守BSD协议的、高性能的key-value数据库</p><p>BSD是”Berkeley Software Distribution”的缩写，意思是“伯克利软件发行版”。</p><p>BSD开源协议是一个给予使用者很大自由的协议。可以自由地使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。BSD鼓励代码共享，但需要尊重代码作者的著作权。BSD由于允许使用者修改和重新发布代码，也允许使用者在BSD代码上开发商业软件，因此BSD是对商业集成很友好的协议。</p><p>我们先通过一个电商业务场景来对redis有一个整体的认识</p><ol><li><p>商品基本信息（名称、价格、厂商），存放于MySQL</p></li><li><p>商品附加信息（描述、详情、评论），存放于MongoDB</p></li><li><p>图片信息，存放于分布式文件系统 </p></li><li><p>搜索关键字，ES、Lucene、solr</p></li><li><p>热点信息，高频，波段性存放于redis</p></li></ol><p>(1) 比如2020年初，“口罩”就是热点信息</p><p>(2) 比如情人节前后，“玫瑰花”、“巧克力”就是热点信息</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li><p>单线程，Redis是单线程的，所以Redis的所有单个操作都是原子性的。多个操作也能由事务来保证原子性（通过MULTI和EXEC这两个指令），因此在redis层面无需考虑并发所带来的影响</p></li><li><p>性能极高，读110000/s，写81000/s</p></li><li><p>丰富的数据类型：String、List、Hash，Set及Ordered Set</p></li><li><p>支持持久化</p></li><li><p>支持横向扩展</p></li><li><p>丰富的特性，redis还支持publish/subscribe，通知，key过期等等特性</p></li><li><p>redis的单个key和value的最大大小都是512M</p></li></ol><p>当redis接收到多个并发请求的时候，redis会把这多个并发请求存入一个队列中，然后按照队列的先后顺序，一个一个地执行命令。也就是redis同一时刻只执行一条命令，只有一条命令执行完了，才会继续执行下一条命令。 所以redis中的incr和decr是绝对的原子操作，绝对的线程安全。尽管redis是单线程模型的，但性能还是很高。</p><img src="/2022/09/19/redis%E6%A6%82%E6%8B%AC/20210415140249.png" style="zoom:150%;"> <p>redis作为单线程模型为什么性能还很高？</p><ol><li><p>纯内存访问：数据存放在内存中，内存的响应时间是极高的！</p></li><li><p>非阻塞式的I/O操作：redis采用epoll作为I/O多路复用技术的实现</p></li><li><p>采用单线程自然也就避免了线程的上下文切换和锁带来的开销</p></li></ol><p>关于epoll和I/O多路复用，是另外一个方向的讨论了，这里就不再深入探讨了。</p><p>举个例子尽量解释一下吧。有一道算法题，一个班30个学生每人都在做这道题，做完的需要检查。检查方式有：1. 派30个老师，各自站在1个学生的旁边，时刻关注着学生的答题进度，一旦学生作答完毕，就进行检查，检查完毕后，对应的老师就撤了。这就是阻塞IO2. 派1个老师，哪个学生做完了就举手，就让这个老师检查答案，检查完一个学生的答案后，还继续等待下一个学生的答案。这基本上就是多路复用的体现了。 也就是一个线程可以同时监听多个套接字，哪个套接字准备好数据了，就读取哪个套接字的数据，然后发送到目的地，然后继续监听多个套接字。如下图所示，\在同一个线程里面， 通过拨开关的方式，来同时传输多个I/O流</p><img src="https://woniumd.oss-cn-hangzhou.aliyuncs.com/java/panfeng/20210415140249.png" style="zoom:150%;"><h2 id="Redis基本配置及通用命令"><a href="#Redis基本配置及通用命令" class="headerlink" title="Redis基本配置及通用命令"></a>Redis基本配置及通用命令</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>拷贝redis.conf到安装目录</p><ol><li><p>redis默认不是后台运行的，可以通过修改该配置项为yes，让redis在后台运行<br>daemonize no</p></li><li><p>2.当redis以守护进程方式运行时，redis会把pid写入/var/run/redis_6379.pid文件中，也可以自己指定写入的位置<br>pidfile /var/run/redis_6379.pid</p></li><li><p>redis监听的端口<br>port 6379</p></li><li><p>设置redis连接密码，如果配置了连接密码，则客户端在连接redis时需要通过AUTH <passowrd> 命令来提供密码<br>requirepass foobared</passowrd></p></li><li><p>绑定的主机地址，目前这样的配置这意味着只有当前机器才能连接redis服务<br>bind 127.0.0.1<br>如果设置bind为0.0.0.0则表示运行任何远程机器访问当前redis服务</p><p>修改redis.conf配置文件，开启后台运行，将bind设置为0.0.0.0，然后再次启动redis服务，这次启动redis服务的时候，要指定redis配置文件的位置</p><blockquote><p>注意：在运行redis-server时，需要指定配置文件</p><p>./redis-server ./redis.conf</p></blockquote></li></ol><h3 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h3><h4 id="在linux中的命令"><a href="#在linux中的命令" class="headerlink" title="在linux中的命令"></a>在linux中的命令</h4><h5 id="redis-server-启动redis服务"><a href="#redis-server-启动redis服务" class="headerlink" title="redis-server:启动redis服务"></a>redis-server:启动redis服务</h5><h5 id="redis-cli：启动客户端"><a href="#redis-cli：启动客户端" class="headerlink" title="redis-cli：启动客户端"></a>redis-cli：启动客户端</h5><p>通过配置文件进行连接。</p><h5 id="redis-benchmark：模拟数据读写的测试。"><a href="#redis-benchmark：模拟数据读写的测试。" class="headerlink" title="redis-benchmark：模拟数据读写的测试。"></a>redis-benchmark：模拟数据读写的测试。</h5><h4 id="在redis里运行的命令"><a href="#在redis里运行的命令" class="headerlink" title="在redis里运行的命令"></a>在redis里运行的命令</h4><p>ping：测试是否连接成功</p><p>select 0-15：选择数据库（总共是16个数据库，默认是第0个）</p><ol><li>keys 查看所有键</li><li>set key value设置键值对，如果键已存在，会覆盖</li><li>get key根据key获取value，如果key不存在就返回nil</li><li>del key返回删除的个数</li><li>dbsize查看当前库中键值对的数量</li><li>keys * 查看当前库中所有键值对的内容</li><li>keys u查看当前库中所有key为u的键值对内容</li><li>keys u?查看当前库中所有以u开头，且后面只跟一列的键值对内容</li><li>exists <key>判断某个键值是否存在</key></li><li>move <key> <db>移动键值对到指定的数据库</db></key></li><li>ttl <key>显示指定的key还要过多久就过期（-1表示永不过期，-2表示已经过期）</key></li><li>expire <key> 10设置指定的key，还能存活10秒</key></li><li>persist key移除key的过期时间，key将持久保持</li><li>flushdb清空当前库中的所有键值对 </li><li>flushall清空所有库中的所有键值对 </li><li>type <key>查看指定key的类型</key></li></ol><h2 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h2><ol><li><p>strlen <key>查看指定key对应的值的长度</key></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 abcfsdfsadf</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line"><span class="string">&quot;abcfsdfsadf&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; strlen k1</span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></li><li><p>getrange <key> <start> <end>截取字符串</end></start></key></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line"><span class="string">&quot;abcfsdfsadf&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; getrange k1 3 5</span><br><span class="line"><span class="string">&quot;fsd&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; getrange k1 2 4</span><br><span class="line"><span class="string">&quot;cfs&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>setrange <key> <start> <replaceVal>覆盖字符串的某一部分</replaceVal></start></key></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line"><span class="string">&quot;abcfsdfsadf&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; setrange k1 0 xyz</span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line"><span class="string">&quot;xyzfsdfsadf&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>setex <key> <second> <value>设置键值对的同时，指定过期时间</value></second></key></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setex k2 10 xyz</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl k2</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; ttl k2</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ttl k2</span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>setnx <key> <value>指定的键值不存在时，才能成功完成本次操作，且返回1如果键值已经存在，则返回0</value></key></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setnx k3 abc</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line"><span class="string">&quot;abc&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; setnx k3 xye</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line"><span class="string">&quot;abc&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>mset k1 v1 k2 v2 k3 v3 批量设置key value</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; mset k5 v5 k6 v6 k7 v7</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;k3&quot;</span></span><br><span class="line">2) <span class="string">&quot;k1&quot;</span></span><br><span class="line">3) <span class="string">&quot;k5&quot;</span></span><br><span class="line">4) <span class="string">&quot;k6&quot;</span></span><br><span class="line">5) <span class="string">&quot;k7&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>mget k1 k2 k3 批量取出值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; mget k5 k6 k7</span><br><span class="line">1) <span class="string">&quot;v5&quot;</span></span><br><span class="line">2) <span class="string">&quot;v6&quot;</span></span><br><span class="line">3) <span class="string">&quot;v7&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>msetnx k1 v1 k2 v2 k3 v3注意在mset时，如果一部分键存在，一部分键不存在，则整个操作都是失败的！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; msetnx k1 v1 k2 v2 k3 v3</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2 k3</span><br><span class="line">1) <span class="string">&quot;v1&quot;</span></span><br><span class="line">2) <span class="string">&quot;v2&quot;</span></span><br><span class="line">3) <span class="string">&quot;v3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; msetnx k1 v1 k2 v2 k3 v3</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; msetnx k1 v11 k2 v21 k3 v31</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2 k3</span><br><span class="line">1) <span class="string">&quot;v1&quot;</span></span><br><span class="line">2) <span class="string">&quot;v2&quot;</span></span><br><span class="line">3) <span class="string">&quot;v3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; msetnx k11 v11 k12 v21 k3 v31</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; mget k11</span><br><span class="line">1) (nil)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>getset key value先获取该key对应的值，然后再设置该key对应的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line"><span class="string">&quot;v1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; getset k1 v11</span><br><span class="line"><span class="string">&quot;v1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line"><span class="string">&quot;v11&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>incr key将指定key的value原子性地递增1，如果key不存在，其初始值为0，再incr之后其值为1。如果value的值不能转型成整型，如“hello”，该操作将执行失败并返回相应的信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> num 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get num</span><br><span class="line"><span class="string">&quot;1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; incr num</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; get num</span><br><span class="line"><span class="string">&quot;2&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>decr key将指定key的value原子性地递减1，如果key不存在，其初始值为0，再decr之后其值为-1。如果value的值不能转型成整型，如“hello”，该操作将执行失败并返回相应的信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; decr num2</span><br><span class="line">(<span class="built_in">integer</span>) -1</span><br><span class="line">127.0.0.1:6379&gt; get num2</span><br><span class="line"><span class="string">&quot;-1&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>append key value拼凑字符串，如果该key存在，则在原有的value后追加该值如果该key不存在，则重新创建一个key/value</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; append k1 123</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line"><span class="string">&quot;v11123&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>incrby key increment</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; incrby num3 10</span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line">127.0.0.1:6379&gt; get num3</span><br><span class="line"><span class="string">&quot;10&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>decrby key decrement </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; decrby num3 3</span><br><span class="line">(<span class="built_in">integer</span>) 17</span><br><span class="line">127.0.0.1:6379&gt; get num3</span><br><span class="line"><span class="string">&quot;17&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="List类型"><a href="#List类型" class="headerlink" title="List类型"></a>List类型</h2><p>list类型底层采取双向链表存储结果实现</p><ol><li><p>创建</p><p>lpush list1 a b c d 在链表头加入元素 –&gt; d c b a</p><p>rpush list2 a b c d 在链表尾加入元素 –&gt; a b c d</p><p>注意，不同元素之间要用空格隔开，而不是逗号!</p><p>linsert list before|after foo bar </p><p>在list中foo元素之前|之后插入bar元素</p><p><img src="/2022/09/19/redis%E6%A6%82%E6%8B%AC/Users\Panda\Desktop\Redis\Redis.assets\wps10.jpg" alt="img"> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush list2 1 2 3 4</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; lrange list2 0 -1  <span class="comment">#-1代表最后一个值</span></span><br><span class="line">1) <span class="string">&quot;4&quot;</span></span><br><span class="line">2) <span class="string">&quot;3&quot;</span></span><br><span class="line">3) <span class="string">&quot;2&quot;</span></span><br><span class="line">4) <span class="string">&quot;1&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>查询lrange list1 start end其中start从0开始，查询结果包含start和end其中start和end也可以写成负数，-1表示倒数第1个元素，-2 表示倒数第2个元素llen list 获取列表中元素的个数lindex list 0 获取列表中指定下标的元素 </p></li><li><p>修改lset list 2 foo 将list中，下标为2的元素内容替换成foorpop</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lset list1 2 foo</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line">1) <span class="string">&quot;d&quot;</span></span><br><span class="line">2) <span class="string">&quot;c&quot;</span></span><br><span class="line">3) <span class="string">&quot;foo&quot;</span></span><br><span class="line">4) <span class="string">&quot;a&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>ltrim list <start> <end> 截取指定范围的值后，再把截取出的值赋给list</end></start></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line">1) <span class="string">&quot;list2&quot;</span></span><br><span class="line">2) <span class="string">&quot;d&quot;</span></span><br><span class="line">3) <span class="string">&quot;c&quot;</span></span><br><span class="line">4) <span class="string">&quot;foo&quot;</span></span><br><span class="line">5) <span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ltrim list1 1 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line">1) <span class="string">&quot;d&quot;</span></span><br><span class="line">2) <span class="string">&quot;c&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>删除lpop 删除并返回链表左侧的元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpop list1</span><br><span class="line"><span class="string">&quot;d&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>rpop 删除并返回链表右侧的元素b</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange list2 0 -1</span><br><span class="line">1) <span class="string">&quot;4&quot;</span></span><br><span class="line">2) <span class="string">&quot;3&quot;</span></span><br><span class="line">3) <span class="string">&quot;2&quot;</span></span><br><span class="line">4) <span class="string">&quot;1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; rpop list2</span><br><span class="line"><span class="string">&quot;1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list2 0 -1</span><br><span class="line">1) <span class="string">&quot;4&quot;</span></span><br><span class="line">2) <span class="string">&quot;3&quot;</span></span><br><span class="line">3) <span class="string">&quot;2&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>blpop key timeout删除并返回链表左侧的元素，若列表中没有元素，阻塞等待timeout秒，如果timeout=0，则一直阻塞等待b</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; blpop list1 5</span><br><span class="line">(nil)</span><br><span class="line">(5.01s)</span><br><span class="line">127.0.0.1:6379&gt; blpop list1 0</span><br><span class="line">1) <span class="string">&quot;list1&quot;</span></span><br><span class="line">2) <span class="string">&quot;d&quot;</span></span><br><span class="line">(109.14s)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>brpop key timeout删除并返回链表右侧的元素，若列表中没有元素，阻塞等待timeout秒，如果timeout=0，则一直阻塞等待</p></li><li><p>lrem list 0 a  删除list中的所有a元素lrem list 1 a  从左向右，删除list中的1个a元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrem list1 2 a</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line"> 1) <span class="string">&quot;d&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;c&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;b&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;d&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;c&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;b&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;d&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;c&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;b&quot;</span></span><br><span class="line">10) <span class="string">&quot;a&quot;</span></span><br><span class="line">11) <span class="string">&quot;d&quot;</span></span><br><span class="line">12) <span class="string">&quot;c&quot;</span></span><br><span class="line">13) <span class="string">&quot;b&quot;</span></span><br><span class="line">14) <span class="string">&quot;a&quot;</span></span><br><span class="line">15) <span class="string">&quot;d&quot;</span></span><br><span class="line">16) <span class="string">&quot;c&quot;</span></span><br><span class="line">17) <span class="string">&quot;c&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrem list1 -2 c</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line"> 1) <span class="string">&quot;d&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;c&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;b&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;d&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;c&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;b&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;d&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;c&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;b&quot;</span></span><br><span class="line">10) <span class="string">&quot;a&quot;</span></span><br><span class="line">11) <span class="string">&quot;d&quot;</span></span><br><span class="line">12) <span class="string">&quot;c&quot;</span></span><br><span class="line">13) <span class="string">&quot;b&quot;</span></span><br><span class="line">14) <span class="string">&quot;a&quot;</span></span><br><span class="line">15) <span class="string">&quot;d&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>lrem list -2 a 从右向左，删除list中的2个a元素 </p><p> 利用list的命令，可以实现一些常用的数据结构</p><p>Stack = LPUSH + LPOP –&gt; FILO</p><p>Queue = LPUSH +RPOP</p><p>Blocking MQ（阻塞队列）= LPUSH + BRPOP</p><p>关于redis中的list数据类型要注意的地方</p><ol><li><p>它是一个字符串链表，可以从left或right端添加值</p></li><li><p>如果键不存在，则创建新的链表</p></li><li><p>如果键已存在，则新增内容</p></li><li><p>如果值全部移除，则对应的键也就消失了</p></li><li><p>操作链表中的头元素和尾元素效果都很高，但是如果操作的是链表中间的元素，效率就很低</p></li><li><p>list可以对数据进行分页操作，通常第一页的数据来自于redis的list，第2页及更多的信息是通过数据库来获取的</p></li></ol><p>list应用场景：微信朋友圈点赞，要求按照点赞顺序显示好友信息  </p></li></ol><h2 id="Hash类型"><a href="#Hash类型" class="headerlink" title="Hash类型"></a>Hash类型</h2><p>Redis中的Hash类型可以看成具有String Key和String Value的map容器。所以该类型非常适合于（但不限于）存储对象的信息。每一个Hash可以存储4294967295个键值对。</p><ol><li>hset key field value</li><li>hmset key field value [field2 value2 …]</li><li>hget key field</li><li>hmget key fields</li><li>hgetall key</li><li>hdel key field</li><li>del key 删除整个hash</li><li>hlen key </li><li>hincrby key field increment  （注意，没有hdecriby）</li><li>hexists key field </li><li>hkeys key 获取key中的所有field</li><li>hvals key 获取key中的所有value </li></ol><p>hash应用场景：存储对象。说到存储对象，string可以存储对象，下面简单讨论一下。</p><ol><li><p>string存储对象，讲究整体性。要么更新整体，要么获取整体。偏向于“读为主”</p></li><li><p>hash存储对象，可以用field的对象的各个属性分开，所以针对于更新操作显得更加灵活。偏向于“改为主”</p></li></ol><p>hash应用场景：电商购物车</p><ol><li><p>以用户id为key：cart:用户id</p></li><li><p>以商品id为field</p></li><li><p>以商品数量为value</p><p>购物车操作</p><p>1.添加商品：hset cart:1001 1044 1</p><pre><code>  2. 增加数量：hincrby cart:1001 1044 1  3. 商品总数：hlen cart:1001  4. 删除商品：hdel cart:1001 1044  5. 获取所有商品：hgetall cart:1001 </code></pre></li></ol><p>当前仅仅是将数据存储到了redis中，并没有起到加速的作用，商品信息还需要再查一次数据库，为了解决这个问题，可以这样重构：</p><p>每条购物车中的商品记录保存成两条field:field1用于保存购买数量商品id:nums –&gt; 数量field2专用于保存购物车中显示的信息，包含文字描述，图片地址，价格等等商品id:info –&gt; json数据</p><h2 id="Zset-sorted-set-有序集合"><a href="#Zset-sorted-set-有序集合" class="headerlink" title="Zset(sorted set) 有序集合"></a>Zset(sorted set) 有序集合</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Redis有序集合zset与普通集合set非常相似，是一个没有重复元素的字符串集合。</p><p>不同之处是有序集合的每个成员都关联了一个<em><strong>*评分（score）*</strong></em>,这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。集合的成员是唯一的，但是评分可以是重复了 。</p><p>因为元素是有序的, 所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。</p><p>访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表。</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">zadd  &lt;key&gt;&lt;score1&gt;&lt;value1&gt;&lt;score2&gt;&lt;value2&gt;…</span><br><span class="line">将一个或多个 member 元素及其 score 值加入到有序集 key 当中。</span><br><span class="line">zrange &lt;key&gt;&lt;start&gt;&lt;stop&gt;  [WITHSCORES]   </span><br><span class="line">返回有序集 key 中，下标在&lt;start&gt;&lt;stop&gt;之间的元素</span><br><span class="line">带WITHSCORES，可以让分数一起和值返回到结果集。</span><br><span class="line">zrangebyscore key minmax [withscores] [limit offset count]</span><br><span class="line">返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。 </span><br><span class="line">zrevrangebyscore key maxmin [withscores] [limit offset count]               </span><br><span class="line">同上，改为从大到小排列。 </span><br><span class="line">zincrby &lt;key&gt;&lt;increment&gt;&lt;value&gt;      为元素的score加上增量</span><br><span class="line">zrem  &lt;key&gt;&lt;value&gt;删除该集合下，指定值的元素 </span><br><span class="line">zcount &lt;key&gt;&lt;min&gt;&lt;max&gt;统计该集合，分数区间内的元素个数 </span><br><span class="line">zrank &lt;key&gt;&lt;value&gt;返回该值在集合中的排名，从0开始。</span><br></pre></td></tr></table></figure><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>案例：如何利用zset实现一个文章访问量的排行榜？</p><p><img src alt="img"> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Redis简介&quot;&gt;&lt;a href=&quot;#Redis简介&quot; class=&quot;headerlink&quot; title=&quot;Redis简介&quot;&gt;&lt;/a&gt;Redis简介&lt;/h2&gt;&lt;p&gt;Redis（==Re==mote ==Di==ctionary ==S==erver），即远程字典服</summary>
      
    
    
    
    
    <category term="蜗牛学院笔记" scheme="http://www.pangtouyu77.fun/tags/%E8%9C%97%E7%89%9B%E5%AD%A6%E9%99%A2%E7%AC%94%E8%AE%B0/"/>
    
    <category term="redis" scheme="http://www.pangtouyu77.fun/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>mysql的四种锁总结</title>
    <link href="http://www.pangtouyu77.fun/2022/09/19/mysql%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%94%81%E6%80%BB%E7%BB%93/"/>
    <id>http://www.pangtouyu77.fun/2022/09/19/mysql%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%94%81%E6%80%BB%E7%BB%93/</id>
    <published>2022-09-19T06:49:24.000Z</published>
    <updated>2022-10-19T07:12:43.888Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言分析"><a href="#前言分析" class="headerlink" title="前言分析"></a>前言分析</h2><p>加入我们要搭建一个删库存的工程，库存在并发量极大的情况容易发生超卖情况。一旦发生超卖，会形成订单成交数量比库存量多的情况。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//不加锁的情况</span><br><span class="line">@Service</span><br><span class="line">public class StockService &#123;</span><br><span class="line">   private Stock stock = new Stock(); </span><br><span class="line">   public synchronized void deduct_yuan()&#123;</span><br><span class="line">        stock.setStock(stock.getStock()-1);</span><br><span class="line">        System.out.println(&quot;库存余量&quot;+stock.getStock());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="压力测试工具：jmeter"><a href="#压力测试工具：jmeter" class="headerlink" title="压力测试工具：jmeter"></a>压力测试工具：jmeter</h4><p>可自行下载，在bin中打开bat文件</p><p><img src="/2022/09/19/mysql%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%94%81%E6%80%BB%E7%BB%93/mysql%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%94%81%E6%80%BB%E7%BB%93%5Cimage-20220919165604310.png" alt="image-20220919165604310"></p><p>逐步添加线程组  http请求 图表</p><p><img src="/2022/09/19/mysql%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%94%81%E6%80%BB%E7%BB%93/mysql%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%94%81%E6%80%BB%E7%BB%93%5Cimage-20220919165704304.png" alt="image-20220919165704304"></p><p><img src="/2022/09/19/mysql%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%94%81%E6%80%BB%E7%BB%93/mysql%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%94%81%E6%80%BB%E7%BB%93%5Cimage-20220919165740356.png" alt="image-20220919165740356"></p><p><img src="/2022/09/19/mysql%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%94%81%E6%80%BB%E7%BB%93/mysql%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%94%81%E6%80%BB%E7%BB%93%5Cimage-20220919165823934.png" alt="image-20220919165823934"></p><p>运行和清除</p><p><img src="/2022/09/19/mysql%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%94%81%E6%80%BB%E7%BB%93/mysql%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%94%81%E6%80%BB%E7%BB%93%5Cimage-20220919165908873.png" alt="image-20220919165908873"></p><h2 id="1-jvm本地锁"><a href="#1-jvm本地锁" class="headerlink" title="1.jvm本地锁"></a>1.jvm本地锁</h2><h3 id="1-1-synchronized同步锁"><a href="#1-1-synchronized同步锁" class="headerlink" title="1.1 synchronized同步锁"></a>1.1 synchronized同步锁</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class StockService &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private StockMapper stockMapper;</span><br><span class="line">    </span><br><span class="line">    public synchronized void deduct()&#123;</span><br><span class="line">    //先查询库存是否充足</span><br><span class="line">            Stock stock=this.stockMapper.selectOne(new QueryWrapper&lt;Stock&gt;().eq(&quot;product_code&quot;,&quot;1001&quot;));</span><br><span class="line">            </span><br><span class="line">            //再减库存</span><br><span class="line">            if(stock!=null&amp;&amp;stock.getCount()&gt;0)&#123;</span><br><span class="line">                stock.setCount(stock.getCount()-1);</span><br><span class="line">                this.stockMapper.updateById(stock);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加关键字synchronized以后，StockService就具备了对象锁，同一时刻就只有一个请求能够获取到锁。虽然不会发生超卖现象，但是只能一个接一个删减下去，效率极低。</p><h3 id="1-2ReentrantLock锁"><a href="#1-2ReentrantLock锁" class="headerlink" title="1.2ReentrantLock锁"></a>1.2ReentrantLock锁</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class StockService &#123; </span><br><span class="line">    @Autowired</span><br><span class="line">    private StockMapper stockMapper;</span><br><span class="line">private ReentrantLock lock=new ReentrantLock();</span><br><span class="line"></span><br><span class="line">    public void deduct()&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        try &#123;</span><br><span class="line">            Stock stock=this.stockMapper.selectOne(new QueryWrapper&lt;Stock&gt;().eq(&quot;product_code&quot;,&quot;1001&quot;));</span><br><span class="line">            if(stock!=null&amp;&amp;stock.getCount()&gt;0)&#123;</span><br><span class="line">                stock.setCount(stock.getCount()-1);</span><br><span class="line">                this.stockMapper.updateById(stock);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3三种情况导致的本地锁失效"><a href="#1-3三种情况导致的本地锁失效" class="headerlink" title="1.3三种情况导致的本地锁失效"></a>1.3三种情况导致的本地锁失效</h3><h4 id="1-3-1-多例模式"><a href="#1-3-1-多例模式" class="headerlink" title="1.3.1 多例模式"></a>1.3.1 多例模式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">@Scope(value = &quot;prototype&quot;,proxyMode = ScopedProxyMode.TARGET_CLASS)</span><br><span class="line">public class StockService &#123; </span><br><span class="line">    @Autowired</span><br><span class="line">    private StockMapper stockMapper;</span><br><span class="line">private ReentrantLock lock=new ReentrantLock();</span><br><span class="line"></span><br><span class="line">    public void deduct()&#123;</span><br><span class="line">//        lock.lock();</span><br><span class="line">        try &#123;</span><br><span class="line">            Stock stock=this.stockMapper.selectOne(new QueryWrapper&lt;Stock&gt;().eq(&quot;product_code&quot;,&quot;1001&quot;));</span><br><span class="line">            if(stock!=null&amp;&amp;stock.getCount()&gt;0)&#123;</span><br><span class="line">                stock.setCount(stock.getCount()-1);</span><br><span class="line">                this.stockMapper.updateById(stock);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">//          lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-2-事务"><a href="#1-3-2-事务" class="headerlink" title="1.3.2 事务"></a>1.3.2 事务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">@Scope(value = &quot;prototype&quot;,proxyMode = ScopedProxyMode.TARGET_CLASS)</span><br><span class="line">public class StockService &#123; </span><br><span class="line">    @Autowired</span><br><span class="line">    private StockMapper stockMapper;</span><br><span class="line">private ReentrantLock lock=new ReentrantLock();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Transactional(isolation = Isolation.READ_UNCOMMITTED)</span><br><span class="line">    public void deduct()&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        try &#123;</span><br><span class="line">            Stock stock=this.stockMapper.selectOne(new QueryWrapper&lt;Stock&gt;().eq(&quot;product_code&quot;,&quot;1001&quot;));</span><br><span class="line">            if(stock!=null&amp;&amp;stock.getCount()&gt;0)&#123;</span><br><span class="line">                stock.setCount(stock.getCount()-1);</span><br><span class="line">                this.stockMapper.updateById(stock);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-3-集群部署"><a href="#1-3-3-集群部署" class="headerlink" title="1.3.3 集群部署"></a>1.3.3 集群部署</h4><p>集群部署会导致jvm本地锁失效</p><h2 id="2-sql语句"><a href="#2-sql语句" class="headerlink" title="2.sql语句"></a>2.sql语句</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//先修改mapper</span><br><span class="line">@Mapper</span><br><span class="line">public interface StockMapper extends BaseMapper&lt;Stock&gt; &#123;</span><br><span class="line"></span><br><span class="line">    @Update(&quot;update db_stock set count=count - #&#123;count&#125; where product_code = #&#123;productCode&#125; and count &gt;= #&#123;count&#125;&quot;)</span><br><span class="line">    int updataStock(@Param(&quot;productCode&quot;) String productCode, @Param(&quot;count&quot;) Integer count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class StockService &#123; </span><br><span class="line">    @Autowired</span><br><span class="line">    private StockMapper stockMapper;</span><br><span class="line">    </span><br><span class="line">public void deduct()&#123;</span><br><span class="line">            this.stockMapper.updataStock(&quot;1001&quot;,1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-优点"><a href="#2-1-优点" class="headerlink" title="2.1 优点"></a>2.1 优点</h3><p>sql锁解决了jvm本地锁三种情况失效的情况</p><h3 id="2-2-缺点"><a href="#2-2-缺点" class="headerlink" title="2.2 缺点"></a>2.2 缺点</h3><p>1.锁范围问题</p><p>2.同一个商品有多条库存记录        例如 不同表里记载了同一个商品不同属性</p><p>3.无法记录库存变化前后的状态    例如操作前有多少工具，操作后有多少工具。无法展现</p><h2 id="3-悲观锁"><a href="#3-悲观锁" class="headerlink" title="3.悲观锁"></a>3.悲观锁</h2><p>在MySQL的InnoDB中，预设的Tansaction isolation level 为REPEATABLE READ（可重读）</p><p><strong>在SELECT 的读取锁定主要分为两种方式：</strong></p><ul><li>SELECT … LOCK IN SHARE MODE　（共享锁）</li><li>SELECT … FOR UPDATE                     （悲观锁）</li></ul><p>这两种方式在事务(Transaction) 进行当中SELECT 到同一个数据表时，都必须等待其它事务数据被提交(Commit)后才会执行。</p><p>悲观锁总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会 阻塞 直到它拿到锁</p><p>但是SELECT … LOCK IN SHARE MODE　（共享锁）在有一方事务要Update同一个表单时很容易造成死锁现象。</p><p>所以最好用SELECT … FOR UPDATE （悲观锁）</p><p>改造mapper</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Mapper</span><br><span class="line">public interface StockMapper extends BaseMapper&lt;Stock&gt; &#123;</span><br><span class="line">    @Select(&quot;select * from db_stock where product_code =#&#123;productCode&#125; for update&quot;)</span><br><span class="line">    List&lt;Stock&gt; queryStock(String productCode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改service</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class StockService &#123; </span><br><span class="line">    @Autowired</span><br><span class="line">    private StockMapper stockMapper;</span><br><span class="line">    </span><br><span class="line">    @Transactional</span><br><span class="line">    public void deduct()&#123;</span><br><span class="line">        //1.查询库存信息并锁定库存信息</span><br><span class="line">        List&lt;Stock&gt; stocks =this.stockMapper.queryStock(&quot;1001&quot;);</span><br><span class="line">        //这里取第一个仓库</span><br><span class="line">        Stock stock=stocks.get(0);</span><br><span class="line"></span><br><span class="line">        //2.判断库存是否充足</span><br><span class="line">        if (stock!=null &amp;&amp; stock.getCount()&gt;0)&#123;</span><br><span class="line">            //3.扣减库存</span><br><span class="line">            stock.setCount(stock.getCount()-1);</span><br><span class="line">            this.stockMapper.updateById(stock);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-乐观锁"><a href="#4-乐观锁" class="headerlink" title="4.乐观锁"></a>4.乐观锁</h2><p>乐观锁（ Optimistic Locking ） 相对悲观锁而言，乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则重试。</p><p>使用数据版本（Version）记录机制实现，这是乐观锁最常用的实现 方式。一般是通过为数据库表增加一个数字类型的 “version” 字段来实现。当读取数据时，将version字段的值一同读出，数据每更新一次，对此version值加一。当我们提交更新的时候，判断数据库表对应记录 的当前版本信息与第一次取出来的version值进行比对，如果数据库表当前版本号与第一次取出来的version值相等，则予以更新。</p><p>给db_stock表添加version字段：</p><p><img src="/2022/09/19/mysql%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%94%81%E6%80%BB%E7%BB%93/mysql%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%94%81%E6%80%BB%E7%BB%93%5C1606489307266.png" alt="1606489307266"></p><p>同时记得需要给Stock实体类添加version属性。</p><p>代码实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class StockService &#123; </span><br><span class="line">   @Autowired</span><br><span class="line">   private StockMapper stockMapper;</span><br><span class="line">    </span><br><span class="line">   public void deduct()&#123;</span><br><span class="line">        //1.查询库存信息并锁定库存信息</span><br><span class="line">        List&lt;Stock&gt; stocks =this.stockMapper.selectList(new QueryWrapper&lt;Stock&gt;().eq(&quot;product_code&quot;,&quot;1001&quot;));</span><br><span class="line">        //这里取第一个仓库</span><br><span class="line">        Stock stock=stocks.get(0);</span><br><span class="line"></span><br><span class="line">        //2.判断库存是否充足</span><br><span class="line">        if (stock!=null &amp;&amp; stock.getCount()&gt;0)&#123;</span><br><span class="line">            //3.扣减库存</span><br><span class="line">            stock.setCount(stock.getCount()-1);</span><br><span class="line">            Integer version=stock.getVersion();</span><br><span class="line">            stock.setVersion(stock.getVersion() +1);</span><br><span class="line">            if (this.stockMapper.update(stock,new UpdateWrapper&lt;Stock&gt;().eq(&quot;id&quot;,stock.getId()).eq(&quot;version&quot;,version))==0)&#123;</span><br><span class="line">                //如果更新失败，则进行重试</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(20);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                this.deduct();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-mysql锁总结"><a href="#5-mysql锁总结" class="headerlink" title="5. mysql锁总结"></a>5. mysql锁总结</h2><p>性能：一个sql &gt; 悲观锁 &gt; jvm锁 &gt; 乐观锁</p><p>如果追求极致性能、业务场景简单并且不需要记录数据前后变化的情况下。</p><p>​        优先选择：一个sql</p><p>如果写并发量较低（多读），争抢不是很激烈的情况下优先选择：乐观锁</p><p>如果写并发量较高，一般会经常冲突，此时选择乐观锁的话，会导致业务代码不间断的重试。</p><p>​        优先选择：mysql悲观锁</p><p>不推荐jvm本地锁。       性能：一个sql &gt; 悲观锁 &gt; jvm锁 &gt; 乐观锁</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言分析&quot;&gt;&lt;a href=&quot;#前言分析&quot; class=&quot;headerlink&quot; title=&quot;前言分析&quot;&gt;&lt;/a&gt;前言分析&lt;/h2&gt;&lt;p&gt;加入我们要搭建一个删库存的工程，库存在并发量极大的情况容易发生超卖情况。一旦发生超卖，会形成订单成交数量比库存量多的情况。&lt;</summary>
      
    
    
    
    
    <category term="mysql" scheme="http://www.pangtouyu77.fun/tags/mysql/"/>
    
    <category term="锁" scheme="http://www.pangtouyu77.fun/tags/%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>消息队列概括</title>
    <link href="http://www.pangtouyu77.fun/2022/09/13/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E6%A6%82%E6%8B%AC/"/>
    <id>http://www.pangtouyu77.fun/2022/09/13/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E6%A6%82%E6%8B%AC/</id>
    <published>2022-09-13T07:14:56.000Z</published>
    <updated>2022-10-19T07:11:40.080Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-消息队列概念"><a href="#1-消息队列概念" class="headerlink" title="1.消息队列概念"></a>1.消息队列概念</h3><p>先开其英语，Message Queue，很直白的缩写，即消息和队列。他和队列一样是一种先进先出的数据结构。</p><p>它可以简单理解为：想把传输的数据放在队列中</p><p>相关概念：</p><ul><li>生产者：把数据放到消息队列里</li><li>从消息队列里面取出数据叫做消费者</li></ul><h2 id="2-优势"><a href="#2-优势" class="headerlink" title="2.优势"></a>2.优势</h2><h3 id="2-1解耦"><a href="#2-1解耦" class="headerlink" title="2.1解耦"></a>2.1解耦</h3><h3 id="2-2异步"><a href="#2-2异步" class="headerlink" title="2.2异步"></a>2.2异步</h3><h3 id="2-3削峰-限流"><a href="#2-3削峰-限流" class="headerlink" title="2.3削峰/限流"></a>2.3削峰/限流</h3><h2 id="3-相关问题"><a href="#3-相关问题" class="headerlink" title="3.相关问题"></a>3.相关问题</h2><h3 id="3-1高可用"><a href="#3-1高可用" class="headerlink" title="3.1高可用"></a>3.1高可用</h3><h3 id="3-2数据丢失问题"><a href="#3-2数据丢失问题" class="headerlink" title="3.2数据丢失问题"></a>3.2数据丢失问题</h3><h3 id="3-3-push和pull"><a href="#3-3-push和pull" class="headerlink" title="3.3.push和pull"></a>3.3.push和pull</h3><h2 id="4-相关技术"><a href="#4-相关技术" class="headerlink" title="4.相关技术"></a>4.相关技术</h2><h3 id="4-1rabbitmq"><a href="#4-1rabbitmq" class="headerlink" title="4.1rabbitmq"></a>4.1rabbitmq</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-消息队列概念&quot;&gt;&lt;a href=&quot;#1-消息队列概念&quot; class=&quot;headerlink&quot; title=&quot;1.消息队列概念&quot;&gt;&lt;/a&gt;1.消息队列概念&lt;/h3&gt;&lt;p&gt;先开其英语，Message Queue，很直白的缩写，即消息和队列。他和队列一样是一种先进先</summary>
      
    
    
    
    
    <category term="消息队列" scheme="http://www.pangtouyu77.fun/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>各类数据结构实现</title>
    <link href="http://www.pangtouyu77.fun/2022/09/13/%E5%90%84%E7%B1%BB%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://www.pangtouyu77.fun/2022/09/13/%E5%90%84%E7%B1%BB%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2022-09-13T06:40:22.000Z</published>
    <updated>2022-10-19T07:12:05.013Z</updated>
    
    <content type="html"><![CDATA[<h2 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h2><h3 id="1-概念介绍"><a href="#1-概念介绍" class="headerlink" title="1.概念介绍"></a>1.概念介绍</h3><p>当一个数据中大部分为同一个值时，可以使用稀疏数组来保护该数组。</p><h3 id="2-数理方法"><a href="#2-数理方法" class="headerlink" title="2.数理方法"></a>2.数理方法</h3><p>1.记录数组一共有几行几列，有多少个不同的值</p><p>2.把具有不同值的元素的行列及值记录在一个小规模数组上，从而缩小程序规模</p><p><img src="/2022/09/13/%E5%90%84%E7%B1%BB%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0/%E5%90%84%E7%B1%BB%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0%5Cimage-20220913145742602.png" alt="image-20220913145742602"></p><h3 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.sparsearray;</span><br><span class="line"></span><br><span class="line">public class SparseArray &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// 创建一个原始的二维数组 11*11</span><br><span class="line">// 0: 表示没有棋子  1表示黑子 2表示篮子</span><br><span class="line">int chessArr1[][] = new int[11][11];</span><br><span class="line">chessArr1[1][2] = 1;</span><br><span class="line">chessArr1[2][3] = 2;</span><br><span class="line">chessArr1[4][5] = 2;</span><br><span class="line">// 输出原始的二维数组</span><br><span class="line">System.out.println(&quot;Ô­Ê¼µÄ¶þÎ¬Êý×é~~&quot;);</span><br><span class="line">for (int[] row : chessArr1) &#123;</span><br><span class="line">for (int data : row) &#123;</span><br><span class="line">System.out.printf(&quot;%d\t&quot;, data);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 将二维数组转化为稀疏数组</span><br><span class="line">// 1. 先遍历二维数组  得到非0数据个数</span><br><span class="line">int sum = 0;</span><br><span class="line">for (int i = 0; i &lt; 11; i++) &#123;</span><br><span class="line">for (int j = 0; j &lt; 11; j++) &#123;</span><br><span class="line">if (chessArr1[i][j] != 0) &#123;</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 2.创建对应稀疏数组个数</span><br><span class="line">int sparseArr[][] = new int[sum + 1][3];</span><br><span class="line">// 给稀疏数组赋值</span><br><span class="line">sparseArr[0][0] = 11;</span><br><span class="line">sparseArr[0][1] = 11;</span><br><span class="line">sparseArr[0][2] = sum;</span><br><span class="line"></span><br><span class="line">// 遍历二维数组 将非0的值存放到sparseARR中</span><br><span class="line">int count = 0; //count 用于记录几个非零数据</span><br><span class="line">for (int i = 0; i &lt; 11; i++) &#123;</span><br><span class="line">for (int j = 0; j &lt; 11; j++) &#123;</span><br><span class="line">if (chessArr1[i][j] != 0) &#123;</span><br><span class="line">count++;</span><br><span class="line">sparseArr[count][0] = i;</span><br><span class="line">sparseArr[count][1] = j;</span><br><span class="line">sparseArr[count][2] = chessArr1[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 输出稀疏数组的形式</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(&quot;µÃµ½Ï¡ÊèÊý×éÎª~~~~&quot;);</span><br><span class="line">for (int i = 0; i &lt; sparseArr.length; i++) &#123;</span><br><span class="line">System.out.printf(&quot;%d\t%d\t%d\t\n&quot;, sparseArr[i][0], sparseArr[i][1], sparseArr[i][2]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">//将稀疏数组恢复成原始的二维数组</span><br><span class="line">/*</span><br><span class="line"> *  1. 先读稀疏数组的第一行，根据第一行数据，创建原始的二维数组</span><br><span class="line">2. 在读取稀疏数组后面几行数据，并赋给原始的二维数组即可</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">//1.先读稀疏数组的第一行，根据第一行数据，创建原始的二维数组</span><br><span class="line"></span><br><span class="line">int chessArr2[][] = new int[sparseArr[0][0]][sparseArr[0][1]];</span><br><span class="line"></span><br><span class="line">//2. 在读取稀疏数组后面几行数据，并赋给原始的二维数组即可</span><br><span class="line"></span><br><span class="line">for(int i = 1; i &lt; sparseArr.length; i++) &#123;</span><br><span class="line">chessArr2[sparseArr[i][0]][sparseArr[i][1]] = sparseArr[i][2];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 输出恢复后的二维数组</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(&quot;»Ö¸´ºóµÄ¶þÎ¬Êý×é&quot;);</span><br><span class="line"></span><br><span class="line">for (int[] row : chessArr2) &#123;</span><br><span class="line">for (int data : row) &#123;</span><br><span class="line">System.out.printf(&quot;%d\t&quot;, data);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;稀疏数组&quot;&gt;&lt;a href=&quot;#稀疏数组&quot; class=&quot;headerlink&quot; title=&quot;稀疏数组&quot;&gt;&lt;/a&gt;稀疏数组&lt;/h2&gt;&lt;h3 id=&quot;1-概念介绍&quot;&gt;&lt;a href=&quot;#1-概念介绍&quot; class=&quot;headerlink&quot; title=&quot;1.概念介</summary>
      
    
    
    
    
    <category term="数据结构" scheme="http://www.pangtouyu77.fun/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>天气与电力预测</title>
    <link href="http://www.pangtouyu77.fun/2022/09/11/%E5%A4%A9%E6%B0%94%E4%B8%8E%E7%94%B5%E5%8A%9B%E9%A2%84%E6%B5%8B/"/>
    <id>http://www.pangtouyu77.fun/2022/09/11/%E5%A4%A9%E6%B0%94%E4%B8%8E%E7%94%B5%E5%8A%9B%E9%A2%84%E6%B5%8B/</id>
    <published>2022-09-11T01:59:28.000Z</published>
    <updated>2022-09-11T01:59:28.616Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>pytorch的loss.backward</title>
    <link href="http://www.pangtouyu77.fun/2022/09/06/pytorch%E7%9A%84loss-backward/"/>
    <id>http://www.pangtouyu77.fun/2022/09/06/pytorch%E7%9A%84loss-backward/</id>
    <published>2022-09-06T01:37:57.000Z</published>
    <updated>2022-10-19T07:12:58.544Z</updated>
    
    <content type="html"><![CDATA[<h2 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h2><h3 id="loss-backward"><a href="#loss-backward" class="headerlink" title="loss.backward()"></a>loss.backward()</h3><p>顾名思义，就是将损失loss向输入测进行反向传播，同时对于需要进行的梯度计算的所有变量x（requies_grad-True）,计算梯度</p><p>d/dx loss,并将其累积到梯度x。grad中备用，即：x.grad=x.grad+d/dx loss</p><h3 id="optimizer-step"><a href="#optimizer-step" class="headerlink" title="optimizer.step()"></a>optimizer.step()</h3><p>优化器对x的值进行更新，例如随机梯度下降SGD</p><h3 id="optimzer-zero-grad"><a href="#optimzer-zero-grad" class="headerlink" title="optimzer.zero_grad()"></a>optimzer.zero_grad()</h3><p>清除优化器上所有x的x.grad，在每次loss.backward()之前，不要忘记使用，否则之前的梯度将会累积。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">x=torch.tensor([1.,2.],requires_grad=True)</span><br><span class="line"># x:tensor([1.,2.],requires_grad=True)</span><br><span class="line">y=100*x</span><br><span class="line"># y: tensor([100.,200.],grad_fn=&lt;SumBackward0&gt;)</span><br><span class="line"></span><br><span class="line">loss=y.sunm()</span><br><span class="line"># y: tensor([300.],grad_fn=&lt;SumBackward0&gt;)</span><br><span class="line"></span><br><span class="line">print(x.grad)    #none  反向传播前  梯度不存在</span><br><span class="line">loss.backward()</span><br><span class="line">print(x.grad)     #x的梯度为 tensor([100.，100.]</span><br><span class="line"></span><br><span class="line">optim=torch.optim.SGD([x],lr=0.001)</span><br><span class="line">print(x)    # x:tensor([1.,2.],requires_grad=True)</span><br><span class="line">optim.step()</span><br><span class="line">print(x)    # x:tensor([0.9000,1.9000],requires_grad=True)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;反向传播&quot;&gt;&lt;a href=&quot;#反向传播&quot; class=&quot;headerlink&quot; title=&quot;反向传播&quot;&gt;&lt;/a&gt;反向传播&lt;/h2&gt;&lt;h3 id=&quot;loss-backward&quot;&gt;&lt;a href=&quot;#loss-backward&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="pytorch" scheme="http://www.pangtouyu77.fun/tags/pytorch/"/>
    
    <category term="loss" scheme="http://www.pangtouyu77.fun/tags/loss/"/>
    
  </entry>
  
  <entry>
    <title>对bert模型的新认知</title>
    <link href="http://www.pangtouyu77.fun/2022/09/05/%E5%AF%B9bert%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%96%B0%E8%AE%A4%E7%9F%A5/"/>
    <id>http://www.pangtouyu77.fun/2022/09/05/%E5%AF%B9bert%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%96%B0%E8%AE%A4%E7%9F%A5/</id>
    <published>2022-09-05T12:56:18.000Z</published>
    <updated>2022-10-19T08:27:05.100Z</updated>
    
    <content type="html"><![CDATA[<h3 id="bert结构"><a href="#bert结构" class="headerlink" title="bert结构"></a>bert结构</h3><h4 id="输入表示"><a href="#输入表示" class="headerlink" title="输入表示"></a>输入表示</h4><p>当输入为单个文本时，Bert输入的第一个序列是特殊类别次元“<cls>”(classfication)、不同语句连接时使用分隔词元“<sep>”（separate）。</sep></cls></p><h4 id="三个embding层"><a href="#三个embding层" class="headerlink" title="三个embding层"></a>三个embding层</h4><p><img src="/2022/09/05/%E5%AF%B9bert%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%96%B0%E8%AE%A4%E7%9F%A5/20210709191935205.png"></p><h5 id="Token-Embeddings"><a href="#Token-Embeddings" class="headerlink" title="Token Embeddings"></a>Token Embeddings</h5><p>token embedding 层是要将各个词转换成固定维度的向量。在BERT中，每个词会被转换成768维的向量表示。输入文本在送入token embeddings 层之前要先进行tokenization处理。此外，两个特殊的token会被插入到tokenization的结果的开头 ([CLS])和结尾 ([SEP]) 。它们视为后面的分类任务和划分句子对服务的。</p><h5 id="Segment-Embeddings"><a href="#Segment-Embeddings" class="headerlink" title="Segment Embeddings"></a>Segment Embeddings</h5><p>segment embeddings用于区分一个句子对中的两个句子，使bert可以判断两端文本是否相似。他只有两种向量表示，前一个向量是把0赋给第一个句子中的各个token, 后一个向量是把1赋给第二个句子中的各个token。如果输入仅仅只有一个句子，那么它的segment embedding就是全0。</p><h5 id="Position-Embeddings"><a href="#Position-Embeddings" class="headerlink" title="Position Embeddings"></a>Position Embeddings</h5><p>bert模型无法编码文本的顺序性，所以需要位置编码。</p><h5 id="合成"><a href="#合成" class="headerlink" title="合成"></a>合成</h5><p>合成基本是相加起来，bert本质是transform模型的一个变种，只不过修改了Encoder层。与<code>TransformerEncoder</code>不同，<code>BERTEncoder</code>使用片段嵌入和可学习的位置嵌入。</p><p><img src="/2022/09/05/%E5%AF%B9bert%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%96%B0%E8%AE%A4%E7%9F%A5/bert-input.svg"></p><p>如图，BERT选择Transformer编码器作为其双向架构。在Transformer编码器中常见是，位置嵌入被加入到输入序列的每个位置。然而，与原始的Transformer编码器不同，BERT使用<em>可学习的</em>位置嵌入。BERT输入序列的嵌入是词元嵌入、片段嵌入和位置嵌入的和。</p><p>但也有其他许多方式。如苏神这篇文章里的![<a class="link" href="https://kexue.fm/archives/8130]%E3%80%82">https://kexue.fm/archives/8130]。<i class="fas fa-external-link-alt"></i></a></p><h4 id="掩蔽语言模型（Masked-Language-Modeling）"><a href="#掩蔽语言模型（Masked-Language-Modeling）" class="headerlink" title="掩蔽语言模型（Masked Language Modeling）"></a>掩蔽语言模型（Masked Language Modeling）</h4><p>语言模型使用左侧的上下文预测词元。为了双向编码上下文以表示每个词元，BERT随机掩蔽词元并使用来自双向上下文的词元以自监督的方式预测掩蔽词元。此任务称为<em>掩蔽语言模型</em>。</p><p>在这个预训练任务中，将随机选择15%的词元作为预测的掩蔽词元。要预测一个掩蔽词元而不使用标签作弊，一个简单的方法是总是用一个特殊的“<mask>”替换输入序列中的词元。然而，人造特殊词元“<mask>”不会出现在微调中。为了避免预训练和微调之间的这种不匹配，如果为预测而屏蔽词元（例如，在“this movie is great”中选择掩蔽和预测“great”），则在输入中将其替换为：</mask></mask></p><ul><li>80%时间为特殊的“<mask>“词元（例如，“this movie is great”变为“this movie is<mask>”；</mask></mask></li><li>10%时间为随机词元（例如，“this movie is great”变为“this movie is drink”）；</li><li>10%时间内为不变的标签词元（例如，“this movie is great”变为“this movie is great”）。</li></ul><h3 id="下一句预测（Next-Sentence-Prediction）"><a href="#下一句预测（Next-Sentence-Prediction）" class="headerlink" title="下一句预测（Next Sentence Prediction）"></a>下一句预测（Next Sentence Prediction）</h3><p>尽管掩蔽语言建模能够编码双向上下文来表示单词，但它不能显式地建模文本对之间的逻辑关系。为了帮助理解两个文本序列之间的关系，BERT在预训练中考虑了一个二元分类任务——<em>下一句预测</em>。在为预训练生成句子对时，有一半的时间它们确实是标签为“真”的连续句子；在另一半的时间里，第二个句子是从语料库中随机抽取的，标记为“假”。</p><h3 id="Bert的代码实现"><a href="#Bert的代码实现" class="headerlink" title="Bert的代码实现"></a>Bert的代码实现</h3><h4 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">#@save</span><br><span class="line">class BERTEncoder(nn.Module):</span><br><span class="line">    &quot;&quot;&quot;BERT编码器&quot;&quot;&quot;</span><br><span class="line">    def __init__(self, vocab_size, num_hiddens, norm_shape, ffn_num_input,</span><br><span class="line">                 ffn_num_hiddens, num_heads, num_layers, dropout,</span><br><span class="line">                 max_len=1000, key_size=768, query_size=768, value_size=768,</span><br><span class="line">                 **kwargs):</span><br><span class="line">        super(BERTEncoder, self).__init__(**kwargs)</span><br><span class="line">        self.token_embedding = nn.Embedding(vocab_size, num_hiddens)</span><br><span class="line">        self.segment_embedding = nn.Embedding(2, num_hiddens)</span><br><span class="line">        self.blks = nn.Sequential()</span><br><span class="line">        for i in range(num_layers):</span><br><span class="line">            self.blks.add_module(f&quot;&#123;i&#125;&quot;, d2l.EncoderBlock(</span><br><span class="line">                key_size, query_size, value_size, num_hiddens, norm_shape,</span><br><span class="line">                ffn_num_input, ffn_num_hiddens, num_heads, dropout, True))</span><br><span class="line">        # 在BERT中，位置嵌入是可学习的，因此我们创建一个足够长的位置嵌入参数</span><br><span class="line">        self.pos_embedding = nn.Parameter(torch.randn(1, max_len,</span><br><span class="line">                                                      num_hiddens))</span><br><span class="line"></span><br><span class="line">    def forward(self, tokens, segments, valid_lens):</span><br><span class="line">        # 在以下代码段中，X的形状保持不变：（批量大小，最大序列长度，num_hiddens）</span><br><span class="line">        X = self.token_embedding(tokens) + self.segment_embedding(segments)</span><br><span class="line">        X = X + self.pos_embedding.data[:, :X.shape[1], :]</span><br><span class="line">        for blk in self.blks:</span><br><span class="line">            X = blk(X, valid_lens)</span><br><span class="line">        return X</span><br><span class="line"></span><br><span class="line">vocab_size, num_hiddens, ffn_num_hiddens, num_heads = 10000, 768, 1024, 4</span><br><span class="line">norm_shape, ffn_num_input, num_layers, dropout = [768], 768, 2, 0.2</span><br><span class="line">encoder = BERTEncoder(vocab_size, num_hiddens, norm_shape, ffn_num_input,</span><br><span class="line">                      ffn_num_hiddens, num_heads, num_layers, dropout)</span><br><span class="line">     </span><br><span class="line">  </span><br><span class="line">#@save</span><br><span class="line">class MaskLM(nn.Module):</span><br><span class="line">    &quot;&quot;&quot;BERT的掩蔽语言模型任务&quot;&quot;&quot;</span><br><span class="line">    def __init__(self, vocab_size, num_hiddens, num_inputs=768, **kwargs):</span><br><span class="line">        super(MaskLM, self).__init__(**kwargs)</span><br><span class="line">        self.mlp = nn.Sequential(nn.Linear(num_inputs, num_hiddens),</span><br><span class="line">                                 nn.ReLU(),</span><br><span class="line">                                 nn.LayerNorm(num_hiddens),</span><br><span class="line">                                 nn.Linear(num_hiddens, vocab_size))</span><br><span class="line"></span><br><span class="line">    def forward(self, X, pred_positions):</span><br><span class="line">        num_pred_positions = pred_positions.shape[1]</span><br><span class="line">        pred_positions = pred_positions.reshape(-1)</span><br><span class="line">        batch_size = X.shape[0]</span><br><span class="line">        batch_idx = torch.arange(0, batch_size)</span><br><span class="line">        # 假设batch_size=2，num_pred_positions=3</span><br><span class="line">        # 那么batch_idx是np.array（[0,0,0,1,1,1]）</span><br><span class="line">        batch_idx = torch.repeat_interleave(batch_idx, num_pred_positions)</span><br><span class="line">        masked_X = X[batch_idx, pred_positions]</span><br><span class="line">        masked_X = masked_X.reshape((batch_size, num_pred_positions, -1))</span><br><span class="line">        mlm_Y_hat = self.mlp(masked_X)</span><br><span class="line">        return mlm_Y_hat</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">class NextSentencePred(nn.Module):</span><br><span class="line">    &quot;&quot;&quot;BERT的下一句预测任务&quot;&quot;&quot;</span><br><span class="line">    def __init__(self, num_inputs, **kwargs):</span><br><span class="line">        super(NextSentencePred, self).__init__(**kwargs)</span><br><span class="line">        self.output = nn.Linear(num_inputs, 2)</span><br><span class="line"></span><br><span class="line">    def forward(self, X):</span><br><span class="line">        # X的形状：(batchsize,num_hiddens)</span><br><span class="line">        return self.output(X)</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line"># 整合代码</span><br><span class="line">class BERTModel(nn.Module):</span><br><span class="line">    &quot;&quot;&quot;BERT模型&quot;&quot;&quot;</span><br><span class="line">    def __init__(self, vocab_size, num_hiddens, norm_shape, ffn_num_input,</span><br><span class="line">                 ffn_num_hiddens, num_heads, num_layers, dropout,</span><br><span class="line">                 max_len=1000, key_size=768, query_size=768, value_size=768,</span><br><span class="line">                 hid_in_features=768, mlm_in_features=768,</span><br><span class="line">                 nsp_in_features=768):</span><br><span class="line">        super(BERTModel, self).__init__()</span><br><span class="line">        self.encoder = BERTEncoder(vocab_size, num_hiddens, norm_shape,</span><br><span class="line">                    ffn_num_input, ffn_num_hiddens, num_heads, num_layers,</span><br><span class="line">                    dropout, max_len=max_len, key_size=key_size,</span><br><span class="line">                    query_size=query_size, value_size=value_size)</span><br><span class="line">        self.hidden = nn.Sequential(nn.Linear(hid_in_features, num_hiddens),</span><br><span class="line">                                    nn.Tanh())</span><br><span class="line">        self.mlm = MaskLM(vocab_size, num_hiddens, mlm_in_features)</span><br><span class="line">        self.nsp = NextSentencePred(nsp_in_features)</span><br><span class="line"></span><br><span class="line">    def forward(self, tokens, segments, valid_lens=None,</span><br><span class="line">                pred_positions=None):</span><br><span class="line">        encoded_X = self.encoder(tokens, segments, valid_lens)</span><br><span class="line">        if pred_positions is not None:</span><br><span class="line">            mlm_Y_hat = self.mlm(encoded_X, pred_positions)</span><br><span class="line">        else:</span><br><span class="line">            mlm_Y_hat = None</span><br><span class="line">        # 用于下一句预测的多层感知机分类器的隐藏层，0是“&lt;cls&gt;”标记的索引</span><br><span class="line">        nsp_Y_hat = self.nsp(self.hidden(encoded_X[:, 0, :]))</span><br><span class="line">        return encoded_X, mlm_Y_hat, nsp_Y_hat</span><br></pre></td></tr></table></figure><h4 id="bert预训练"><a href="#bert预训练" class="headerlink" title="bert预训练"></a>bert预训练</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line">from torch import nn</span><br><span class="line">from d2l import torch as d2l</span><br><span class="line"></span><br><span class="line">batch_size, max_len = 512, 64</span><br><span class="line">train_iter, vocab = d2l.load_data_wiki(batch_size, max_len)</span><br><span class="line"></span><br><span class="line">net = d2l.BERTModel(len(vocab), num_hiddens=128, norm_shape=[128],</span><br><span class="line">                    ffn_num_input=128, ffn_num_hiddens=256, num_heads=2,</span><br><span class="line">                    num_layers=2, dropout=0.2, key_size=128, query_size=128,</span><br><span class="line">                    value_size=128, hid_in_features=128, mlm_in_features=128,</span><br><span class="line">                    nsp_in_features=128)</span><br><span class="line">devices = d2l.try_all_gpus()</span><br><span class="line">loss = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line">#@save</span><br><span class="line">def _get_batch_loss_bert(net, loss, vocab_size, tokens_X,</span><br><span class="line">                         segments_X, valid_lens_x,</span><br><span class="line">                         pred_positions_X, mlm_weights_X,</span><br><span class="line">                         mlm_Y, nsp_y):</span><br><span class="line">    # 前向传播</span><br><span class="line">    _, mlm_Y_hat, nsp_Y_hat = net(tokens_X, segments_X,</span><br><span class="line">                                  valid_lens_x.reshape(-1),</span><br><span class="line">                                  pred_positions_X)</span><br><span class="line">    # 计算遮蔽语言模型损失</span><br><span class="line">    mlm_l = loss(mlm_Y_hat.reshape(-1, vocab_size), mlm_Y.reshape(-1)) *\</span><br><span class="line">    mlm_weights_X.reshape(-1, 1)</span><br><span class="line">    mlm_l = mlm_l.sum() / (mlm_weights_X.sum() + 1e-8)</span><br><span class="line">    # 计算下一句子预测任务的损失</span><br><span class="line">    nsp_l = loss(nsp_Y_hat, nsp_y)</span><br><span class="line">    l = mlm_l + nsp_l</span><br><span class="line">    return mlm_l, nsp_l, l</span><br><span class="line">    </span><br><span class="line">def train_bert(train_iter, net, loss, vocab_size, devices, num_steps):</span><br><span class="line">    net = nn.DataParallel(net, device_ids=devices).to(devices[0])</span><br><span class="line">    trainer = torch.optim.Adam(net.parameters(), lr=0.01)</span><br><span class="line">    step, timer = 0, d2l.Timer()</span><br><span class="line">    animator = d2l.Animator(xlabel=&#x27;step&#x27;, ylabel=&#x27;loss&#x27;,</span><br><span class="line">                            xlim=[1, num_steps], legend=[&#x27;mlm&#x27;, &#x27;nsp&#x27;])</span><br><span class="line">    # 遮蔽语言模型损失的和，下一句预测任务损失的和，句子对的数量，计数</span><br><span class="line">    metric = d2l.Accumulator(4)</span><br><span class="line">    num_steps_reached = False</span><br><span class="line">    while step &lt; num_steps and not num_steps_reached:</span><br><span class="line">        for tokens_X, segments_X, valid_lens_x, pred_positions_X,\</span><br><span class="line">            mlm_weights_X, mlm_Y, nsp_y in train_iter:</span><br><span class="line">            tokens_X = tokens_X.to(devices[0])</span><br><span class="line">            segments_X = segments_X.to(devices[0])</span><br><span class="line">            valid_lens_x = valid_lens_x.to(devices[0])</span><br><span class="line">            pred_positions_X = pred_positions_X.to(devices[0])</span><br><span class="line">            mlm_weights_X = mlm_weights_X.to(devices[0])</span><br><span class="line">            mlm_Y, nsp_y = mlm_Y.to(devices[0]), nsp_y.to(devices[0])</span><br><span class="line">            trainer.zero_grad()</span><br><span class="line">            timer.start()</span><br><span class="line">            mlm_l, nsp_l, l = _get_batch_loss_bert(</span><br><span class="line">                net, loss, vocab_size, tokens_X, segments_X, valid_lens_x,</span><br><span class="line">                pred_positions_X, mlm_weights_X, mlm_Y, nsp_y)</span><br><span class="line">            l.backward()</span><br><span class="line">            trainer.step()</span><br><span class="line">            metric.add(mlm_l, nsp_l, tokens_X.shape[0], 1)</span><br><span class="line">            timer.stop()</span><br><span class="line">            animator.add(step + 1,</span><br><span class="line">                         (metric[0] / metric[3], metric[1] / metric[3]))</span><br><span class="line">            step += 1</span><br><span class="line">            if step == num_steps:</span><br><span class="line">                num_steps_reached = True</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">    print(f&#x27;MLM loss &#123;metric[0] / metric[3]:.3f&#125;, &#x27;</span><br><span class="line">          f&#x27;NSP loss &#123;metric[1] / metric[3]:.3f&#125;&#x27;)</span><br><span class="line">    print(f&#x27;&#123;metric[2] / timer.sum():.1f&#125; sentence pairs/sec on &#x27;</span><br><span class="line">          f&#x27;&#123;str(devices)&#125;&#x27;)</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">def get_bert_encoding(net, tokens_a, tokens_b=None):</span><br><span class="line">    tokens, segments = d2l.get_tokens_and_segments(tokens_a, tokens_b)</span><br><span class="line">    token_ids = torch.tensor(vocab[tokens], device=devices[0]).unsqueeze(0)</span><br><span class="line">    segments = torch.tensor(segments, device=devices[0]).unsqueeze(0)</span><br><span class="line">    valid_len = torch.tensor(len(tokens), device=devices[0]).unsqueeze(0)</span><br><span class="line">    encoded_X, _, _ = net(token_ids, segments, valid_len)</span><br><span class="line">    return encoded_X</span><br><span class="line">    </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tokens_a = [&#x27;a&#x27;, &#x27;crane&#x27;, &#x27;is&#x27;, &#x27;flying&#x27;]</span><br><span class="line">encoded_text = get_bert_encoding(net, tokens_a)</span><br><span class="line"># 词元：&#x27;&lt;cls&gt;&#x27;,&#x27;a&#x27;,&#x27;crane&#x27;,&#x27;is&#x27;,&#x27;flying&#x27;,&#x27;&lt;sep&gt;&#x27;</span><br><span class="line">encoded_text_cls = encoded_text[:, 0, :]</span><br><span class="line">encoded_text_crane = encoded_text[:, 2, :]</span><br><span class="line">encoded_text.shape, encoded_text_cls.shape, encoded_text_crane[0][:3]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tokens_a, tokens_b = [&#x27;a&#x27;, &#x27;crane&#x27;, &#x27;driver&#x27;, &#x27;came&#x27;], [&#x27;he&#x27;, &#x27;just&#x27;, &#x27;left&#x27;]</span><br><span class="line">encoded_pair = get_bert_encoding(net, tokens_a, tokens_b)</span><br><span class="line"># 词元：&#x27;&lt;cls&gt;&#x27;,&#x27;a&#x27;,&#x27;crane&#x27;,&#x27;driver&#x27;,&#x27;came&#x27;,&#x27;&lt;sep&gt;&#x27;,&#x27;he&#x27;,&#x27;just&#x27;,</span><br><span class="line"># &#x27;left&#x27;,&#x27;&lt;sep&gt;&#x27;</span><br><span class="line">encoded_pair_cls = encoded_pair[:, 0, :]</span><br><span class="line">encoded_pair_crane = encoded_pair[:, 2, :]</span><br><span class="line">encoded_pair.shape, encoded_pair_cls.shape, encoded_pair_crane[0][:3]</span><br></pre></td></tr></table></figure><h4 id="bert微调实现不同功能"><a href="#bert微调实现不同功能" class="headerlink" title="bert微调实现不同功能"></a>bert微调实现不同功能</h4><h3 id="几类不同的Chinese-bert"><a href="#几类不同的Chinese-bert" class="headerlink" title="几类不同的Chinese-bert"></a>几类不同的Chinese-bert</h3><h4 id="Google的bert-base-chinese"><a href="#Google的bert-base-chinese" class="headerlink" title="Google的bert-base-chinese"></a>Google的bert-base-chinese</h4><p>![<a class="link" href="https://github.com/google-research/bert]">https://github.com/google-research/bert]<i class="fas fa-external-link-alt"></i></a></p><h4 id="讯飞的新全词系列bert"><a href="#讯飞的新全词系列bert" class="headerlink" title="讯飞的新全词系列bert"></a>讯飞的新全词系列bert</h4><p>![<a class="link" href="https://github.com/ymcui/Chinese-BERT-wwm]">https://github.com/ymcui/Chinese-BERT-wwm]<i class="fas fa-external-link-alt"></i></a></p><p>谷歌官方发布的<code>BERT-base-Chinese</code>中文是以<strong>字</strong>为粒度进行切分，没有考虑到传统NLP中的中文分词（CWS）。 我们将全词Mask的方法应用在了中文中，使用了中文维基百科（包括简体和繁体）进行训练，并且使用了<a class="link" href="http://ltp.ai/">哈工大LTP<i class="fas fa-external-link-alt"></i></a>作为分词工具，即对组成同一个<strong>词</strong>的汉字全部进行Mask。</p><p>参考：![<a class="link" href="https://zh-v2.d2l.ai/chapter_natural-language-processing-pretraining/bert-pretraining.html">14.10. 预训练BERT — 动手学深度学习 2.0.0-beta1 documentation (d2l.ai)<i class="fas fa-external-link-alt"></i></a>]</p><p>![<a class="link" href="https://www.bilibili.com/video/BV15L4y1v7ts?p=1&vd_source=baa06fbf62c3de66984599c475808252">BERT微调_哔哩哔哩_bilibili<i class="fas fa-external-link-alt"></i></a>]</p><p>![<a class="link" href="https://www.zhihu.com/question/510738704/answer/2305000399]">https://www.zhihu.com/question/510738704/answer/2305000399]<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;bert结构&quot;&gt;&lt;a href=&quot;#bert结构&quot; class=&quot;headerlink&quot; title=&quot;bert结构&quot;&gt;&lt;/a&gt;bert结构&lt;/h3&gt;&lt;h4 id=&quot;输入表示&quot;&gt;&lt;a href=&quot;#输入表示&quot; class=&quot;headerlink&quot; title=&quot;输</summary>
      
    
    
    
    
    <category term="NLP" scheme="http://www.pangtouyu77.fun/tags/NLP/"/>
    
    <category term="bert" scheme="http://www.pangtouyu77.fun/tags/bert/"/>
    
  </entry>
  
  <entry>
    <title>softmax+交叉熵应用与多标签问题</title>
    <link href="http://www.pangtouyu77.fun/2022/09/01/softmax-%E4%BA%A4%E5%8F%89%E7%86%B5%E5%BA%94%E7%94%A8%E4%B8%8E%E5%A4%9A%E6%A0%87%E7%AD%BE%E9%97%AE%E9%A2%98/"/>
    <id>http://www.pangtouyu77.fun/2022/09/01/softmax-%E4%BA%A4%E5%8F%89%E7%86%B5%E5%BA%94%E7%94%A8%E4%B8%8E%E5%A4%9A%E6%A0%87%E7%AD%BE%E9%97%AE%E9%A2%98/</id>
    <published>2022-09-01T14:29:51.000Z</published>
    <updated>2022-09-01T14:29:51.960Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>配分函数</title>
    <link href="http://www.pangtouyu77.fun/2022/09/01/%E9%85%8D%E5%88%86%E5%87%BD%E6%95%B0/"/>
    <id>http://www.pangtouyu77.fun/2022/09/01/%E9%85%8D%E5%88%86%E5%87%BD%E6%95%B0/</id>
    <published>2022-09-01T14:29:10.000Z</published>
    <updated>2022-09-01T14:29:10.826Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>python字典的浅拷贝和深拷贝</title>
    <link href="http://www.pangtouyu77.fun/2022/08/23/python%E5%AD%97%E5%85%B8%E7%9A%84%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    <id>http://www.pangtouyu77.fun/2022/08/23/python%E5%AD%97%E5%85%B8%E7%9A%84%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D/</id>
    <published>2022-08-23T08:43:11.000Z</published>
    <updated>2022-10-19T07:12:53.024Z</updated>
    
    <content type="html"><![CDATA[<p>写脚本遇到的一个小知识</p><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>a.copy()</p><p>其作用是返回一个对字典d进行浅拷贝而得到的新字典。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">stu1=&#123;&#x27;姓名&#x27;:&#x27;小明&#x27;,&#x27;年龄&#x27;:19,&#x27;score&#x27;:&#123;&#x27;python&#x27;:95&#125;&#125;</span><br><span class="line">stu2=stu1  #直接赋值，此时stu2和stu1指向同一个字典对象</span><br><span class="line">stu3=stu1.copy() #使用copy方法进行浅拷贝</span><br><span class="line"></span><br><span class="line">print(&#x27;stu1、stu2和stu3的内存地址分别为：&#x27;,id(stu1),id(stu2),id(stu3))</span><br><span class="line"># 2665578033656 2665578033656 2665580572960</span><br><span class="line">stu1[&#x27;name&#x27;]=&#x27;马红&#x27; #将stu1中键为name的元素的值修改为#&#x27;马红&#x27;</span><br><span class="line"></span><br><span class="line">print(&#x27;stu1的值为：&#x27;,stu1)</span><br><span class="line">#stu1的值为： &#123;&#x27;姓名&#x27;: &#x27;小明&#x27;, &#x27;年龄&#x27;: 19, &#x27;score&#x27;: &#123;&#x27;python&#x27;: 95&#125;, &#x27;name&#x27;: &#x27;马红&#x27;&#125;</span><br><span class="line"></span><br><span class="line">print(&#x27;stu2的值为：&#x27;,stu2)</span><br><span class="line">stu2的值为： &#123;&#x27;姓名&#x27;: &#x27;小明&#x27;, &#x27;年龄&#x27;: 19, &#x27;score&#x27;: &#123;&#x27;python&#x27;: 95&#125;, &#x27;name&#x27;: &#x27;马红&#x27;&#125;</span><br><span class="line"></span><br><span class="line">print(&#x27;stu3的值为：&#x27;,stu3)</span><br><span class="line">stu3的值为： &#123;&#x27;姓名&#x27;: &#x27;小明&#x27;, &#x27;年龄&#x27;: 19, &#x27;score&#x27;: &#123;&#x27;python&#x27;: 95&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>a.deepcopy()</p><p>深拷贝不仅使得原有字典对象和生成的字典对象对应不同的内存空间，而且使得两个字典对象中的可变类型元素对应不同的内存空间，从而使得两个字典对象完全独立。其作用是根据字典d进行深拷贝创建一个新的字典对象并返回。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import copy #导入copy模块</span><br><span class="line">stu1=&#123;&#x27;name&#x27;:&#x27;李晓明&#x27;,&#x27;age&#x27;:19,&#x27;score&#x27;:&#123;&#x27;python&#x27;:95,&#x27;math&#x27;:92&#125;&#125;</span><br><span class="line">stu2=copy.deepcopy(stu1) #使用deepcopy方法进行深拷贝</span><br><span class="line"></span><br><span class="line">print(&quot;stu1和stu2的内存地址分别为：&quot;, id(stu1), id(stu2))</span><br><span class="line">#2135839142392 2136735144048</span><br><span class="line"></span><br><span class="line">print(&quot;stu1[&#x27;score&#x27;]和stu2[&#x27;score&#x27;]的内存地址分别为：&quot;,id(stu1[&#x27;score&#x27;]), id(stu2[&#x27;score&#x27;]))</span><br><span class="line">#2135839142320 2136716170080</span><br><span class="line"></span><br><span class="line">stu1[&#x27;score&#x27;][&#x27;python&#x27;]=100</span><br><span class="line">print(&#x27;stu1的值为：&#x27;,stu1)</span><br><span class="line">stu1的值为： &#123;&#x27;name&#x27;: &#x27;李晓明&#x27;, &#x27;age&#x27;: 19, &#x27;score&#x27;: &#123;&#x27;python&#x27;: 100, &#x27;math&#x27;: 92&#125;&#125;</span><br><span class="line"></span><br><span class="line">print(&#x27;stu2的值为：&#x27;,stu2)</span><br><span class="line">stu2的值为： &#123;&#x27;name&#x27;: &#x27;李晓明&#x27;, &#x27;age&#x27;: 19, &#x27;score&#x27;: &#123;&#x27;python&#x27;: 95, &#x27;math&#x27;: 92&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>深拷贝不仅使得原有字典对象和生成的字典对象对应不同的内存空间，而且使得两个字典对象中的可变类型元素对应不同的内存空间，从而使得两个字典对象完全独立。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;写脚本遇到的一个小知识&lt;/p&gt;
&lt;h3 id=&quot;浅拷贝&quot;&gt;&lt;a href=&quot;#浅拷贝&quot; class=&quot;headerlink&quot; title=&quot;浅拷贝&quot;&gt;&lt;/a&gt;浅拷贝&lt;/h3&gt;&lt;p&gt;a.copy()&lt;/p&gt;
&lt;p&gt;其作用是返回一个对字典d进行浅拷贝而得到的新字典。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="python" scheme="http://www.pangtouyu77.fun/tags/python/"/>
    
    <category term="浅拷贝深拷贝" scheme="http://www.pangtouyu77.fun/tags/%E6%B5%85%E6%8B%B7%E8%B4%9D%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
  <entry>
    <title>shiro安全框架</title>
    <link href="http://www.pangtouyu77.fun/2022/07/27/shiro%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6/"/>
    <id>http://www.pangtouyu77.fun/2022/07/27/shiro%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6/</id>
    <published>2022-07-27T06:41:16.000Z</published>
    <updated>2022-07-27T06:41:16.713Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>ElementUi整合入vue</title>
    <link href="http://www.pangtouyu77.fun/2022/07/26/ElementUi%E6%95%B4%E5%90%88%E5%85%A5vue/"/>
    <id>http://www.pangtouyu77.fun/2022/07/26/ElementUi%E6%95%B4%E5%90%88%E5%85%A5vue/</id>
    <published>2022-07-26T14:38:03.000Z</published>
    <updated>2022-07-26T14:40:11.321Z</updated>
    
    
    
    
    
    <category term="ElementUi" scheme="http://www.pangtouyu77.fun/tags/ElementUi/"/>
    
    <category term="Vue" scheme="http://www.pangtouyu77.fun/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>listen组件</title>
    <link href="http://www.pangtouyu77.fun/2022/07/21/listen%E7%BB%84%E4%BB%B6/"/>
    <id>http://www.pangtouyu77.fun/2022/07/21/listen%E7%BB%84%E4%BB%B6/</id>
    <published>2022-07-21T12:16:32.000Z</published>
    <updated>2022-07-21T12:53:03.183Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Listener简介"><a href="#Listener简介" class="headerlink" title="Listener简介"></a>Listener简介</h3><p>监听器，是javaweb三大组件之一</p><h3 id="ServeltContextListener"><a href="#ServeltContextListener" class="headerlink" title="ServeltContextListener"></a>ServeltContextListener</h3><p>ServeltContextListener入门小案例？<br>        1.创建一个类，实现监听器接口，重写抽象方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class MyServletContextListener implements ServletContextListener &#123;</span><br><span class="line">@Override</span><br><span class="line">public void contextInitialized(ServletContextEvent sce) &#123;</span><br><span class="line">System.out.println(&quot;servletContext对象被创建...&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void contextDestroyed(ServletContextEvent sce) &#123;</span><br><span class="line">System.out.println(&quot;servletContext对象被销毁...&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">```</span><br><span class="line">2.进行简单配置</span><br></pre></td></tr></table></figure><pre><code>        &lt;listener&gt;            &lt;listener-class&gt;com.listener.MyServletContextListener&lt;/listener-class&gt;        &lt;/listener&gt;</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### ServletRequestListener</span><br><span class="line">ServletRequestListener入门小案例</span><br><span class="line">1.创建一个类，实现监听器接口，重写抽象方法</span><br></pre></td></tr></table></figure><pre><code>        public class MyServletRequestListener implements ServletRequestListener &#123;            @Override            public void requestInitialized(ServletRequestEvent sre) &#123;                System.out.println(&quot;request对象被创建...&quot;);            &#125;                        @Override            public void requestDestroyed(ServletRequestEvent sre) &#123;                System.out.println(&quot;request对象被销毁了...&quot;);            &#125;        &#125;</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.进行简单配置</span><br></pre></td></tr></table></figure><pre><code>        &lt;listener&gt;            &lt;listener-class&gt;com.listener.MyServletRequestListener&lt;/listener-class&gt;        &lt;/listener&gt;</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### listener配置方式</span><br><span class="line">#### 方式一：配置文件方式</span><br></pre></td></tr></table></figure><listener>    <listener-class>com.listener.MyServletRequestListener</listener-class></listener>```        #### 方式二：注解方式@WebListener]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Listener简介&quot;&gt;&lt;a href=&quot;#Listener简介&quot; class=&quot;headerlink&quot; title=&quot;Listener简介&quot;&gt;&lt;/a&gt;Listener简介&lt;/h3&gt;&lt;p&gt;监听器，是javaweb三大组件之一&lt;/p&gt;
&lt;h3 id=&quot;Servelt</summary>
      
    
    
    
    
    <category term="listener" scheme="http://www.pangtouyu77.fun/tags/listener/"/>
    
    <category term="监听器" scheme="http://www.pangtouyu77.fun/tags/%E7%9B%91%E5%90%AC%E5%99%A8/"/>
    
  </entry>
  
</feed>
